rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isDemoUser() {
      // Demo user has specific UID
      return request.auth != null && request.auth.uid == '1QyfaI0JWugRDw6SP0XtlL1cRUf2';
    }

    function isAdmin() {
      return request.auth != null &&
             request.auth.token.role != null &&
             request.auth.token.role in ['admin', 'super_admin'];
    }

    function isSuperAdmin() {
      return request.auth != null &&
             request.auth.token.role == 'super_admin';
    }



    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);

      // Wedding subcollection (music, settings, etc.)
      match /wedding/{document=**} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }

      // Settings subcollection (cookie consent, preferences, etc.)
      match /settings/{settingId} {
        // User can read their own settings
        allow read: if isAuthenticated() && isOwner(userId);

        // User can create their own settings
        allow create: if isAuthenticated() && isOwner(userId);

        // User can update their own settings
        allow update: if isAuthenticated() && isOwner(userId);

        // User can delete their own settings
        allow delete: if isAuthenticated() && isOwner(userId);
      }

      // Favorite vendors subcollection
      match /favoriteVendors/{vendorId} {
        // User can read, write, create, and delete their own favorite vendors
        allow read, write, create, delete: if isAuthenticated() && isOwner(userId);
      }
    }

    // Weddings collection
    match /weddings/{weddingId} {
      allow read: if isAuthenticated() &&
                     (isOwner(resource.data.userId) || isDemoUser());
      allow write: if isAuthenticated() &&
                      (isOwner(resource.data.userId) || isDemoUser());
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       request.resource.data.keys().hasAll(['userId', 'brideName', 'groomName', 'budget', 'style', 'region']) &&
                       request.resource.data.userId == request.auth.uid;
    }

    // Guests collection
    match /guests/{guestId} {
      allow read, write: if isAuthenticated() &&
                            (isDemoUser() ||
                             (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                              get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'firstName', 'lastName']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read, write: if isAuthenticated() &&
                            (isDemoUser() ||
                             (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                              get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'title', 'category', 'status']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Budget items collection
    match /budgetItems/{budgetItemId} {
      allow read, write: if isAuthenticated() &&
                            (isDemoUser() ||
                             (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                              get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'name', 'category', 'budgetedAmount']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Timeline events collection
    match /timelineEvents/{eventId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Milestones collection
    match /milestones/{milestoneId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Gift items collection
    match /giftItems/{giftId} {
      allow read, write: if isAuthenticated() &&
                            exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                            get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'name', 'category', 'price', 'quantity']) &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid;
    }

    // Seating plans collection
    match /seatingPlans/{planId} {
      // Allow read if authenticated and user owns the wedding
      allow read: if isAuthenticated() &&
                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid);

      // Allow create if authenticated and user owns the wedding
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'name']) &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid;

      // Allow update if authenticated and user owns the wedding (check both old and new data)
      allow update: if isAuthenticated() &&
                       ((exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid) ||
                        (exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow delete if authenticated and user owns the wedding
      allow delete: if isAuthenticated() &&
                       exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;
    }

    // Moodboard collection
    match /moodboards/{moodboardId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow write: if isAuthenticated() &&
                      !isDemoUser() &&
                      exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       !isDemoUser() &&
                       request.resource.data.keys().hasAll(['weddingId', 'userId', 'url', 'source', 'isFavorite', 'tags']) &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid &&
                       request.auth.uid == request.resource.data.userId;
    }

    // Menu items collection
    match /menuItems/{menuItemId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Drink items collection
    match /drinkItems/{drinkItemId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Accommodations collection
    match /accommodations/{accommodationId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Rooms collection (sub-collection of accommodations)
    match /rooms/{roomId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/accommodations/$(resource.data.accommodationId)) &&
                                      exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Moodboards collection
    match /moodboards/{moodboardId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Moodboard Folders collection (Pinterest-style boards)
    match /moodboardFolders/{folderId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['name', 'weddingId', 'userId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid &&
                         request.auth.uid == request.resource.data.userId));
      allow update: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Notes collection
    match /notes/{noteId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Music collection
    match /music/{musicId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // AI Timeline Items collection
    match /aiTimelineItems/{itemId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Wedding Day Timeline collection
    match /weddingDayTimeline/{itemId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'time', 'activity', 'category']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Wedding Websites collection
    match /weddingWebsites/{websiteId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Public collections (read-only for authenticated users)

    // Venues collection (public read, admin write)
    match /venues/{venueId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write (handled by Cloud Functions)
    }

    // Vendors collection (user's personal vendors list)
    match /vendors/{vendorId} {
      // Allow read if authenticated and user owns the wedding
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow create if authenticated and user owns the wedding (use request.resource for new documents)
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'name', 'category']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow update/delete if authenticated and user owns the wedding
      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Services collection
    match /services/{serviceId} {
      allow read: if resource.data.active == true ||
                     isOwner(resource.data.userId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow create: if isAuthenticated() &&
                       request.auth.token.role in ['vendor', 'admin', 'super_admin'];
      allow update: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow delete: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if resource.data.verified == true ||
                     isOwner(resource.data.userId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.userId;
      allow update: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow delete: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
    }

    // Inquiries collection
    match /inquiries/{inquiryId} {
      allow read: if isOwner(resource.data.userId) ||
                     isOwner(resource.data.vendorUserId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) ||
                       isOwner(resource.data.vendorUserId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow delete: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
    }

    // Favorites collection
    match /favorites/{favoriteId} {
      allow read, write: if isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
    }

    // Analytics collection
    match /analytics/{analyticsId} {
      allow read: if isOwner(resource.data.vendorUserId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow write: if false; // Only server can write analytics
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow update: if isOwner(resource.data.userId); // For marking as read
      allow create, delete: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
    }

    // Wedding notifications collection
    match /weddingNotifications/{notificationId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin()); // For marking as read
      // Users can create notifications for themselves, admins can create for anyone
      allow create: if isAuthenticated() &&
                       (request.auth.uid == request.resource.data.userId || isAdmin()) &&
                       request.resource.data.keys().hasAll(['userId', 'type', 'title', 'message', 'priority', 'category', 'read']);
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // Admin logs collection
    match /adminLogs/{logId} {
      allow read: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
      allow write: if false; // Only server can write logs
    }

    // Task templates collection (public read, admin write)
    match /taskTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write
    }

    // Checklist completed items collection
    match /checklist_completed/{weddingId} {
      allow read, write: if isAuthenticated() &&
                            exists(/databases/$(database)/documents/weddings/$(weddingId)) &&
                            get(/databases/$(database)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       exists(/databases/$(database)/documents/weddings/$(weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
    }

    // Marketplace vendors collection
    match /marketplaceVendors/{vendorId} {
      // Anyone can read marketplace vendors (public marketplace)
      allow read: if true;

      // Anyone can create a vendor registration (authenticated or not - will be pending approval)
      // This allows vendors to register without creating an account first
      allow create: if request.resource.data.keys().hasAll(['name', 'category', 'email', 'phone', 'editToken']) &&
                       request.resource.data.verified == false &&
                       request.resource.data.status == 'pending';

      // Vendors can update their own listing using editToken (no authentication required)
      // This allows vendors to edit their listing via the edit link
      allow update: if request.resource.data.editToken == resource.data.editToken &&
                       resource.data.editToken != null &&
                       resource.data.editToken != '';

      // Admins can update/delete any vendor
      allow update, delete: if isAdmin();
    }

    // Vendor inquiries collection - contact requests from customers to vendors
    match /vendorInquiries/{inquiryId} {
      // Anyone can create an inquiry (customers contacting vendors)
      allow create: if request.resource.data.keys().hasAll(['vendorId', 'vendorName', 'vendorEmail', 'customerName', 'customerEmail', 'message']);

      // Admins can read all inquiries
      allow read: if isAdmin();

      // Admins can update/delete inquiries
      allow update, delete: if isAdmin();
    }

    // Wedding websites collection
    match /weddingWebsites/{websiteId} {
      // Owner can read/write their own website
      allow read, write: if isAuthenticated() &&
                            resource.data.userId == request.auth.uid;

      // Owner can create website
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'userId', 'customUrl', 'template']) &&
                       request.auth.uid == request.resource.data.userId;

      // Allow list/query for owner (to find website by weddingId)
      allow list: if isAuthenticated() &&
                     request.auth.uid != null;

      // Public read for published websites (for guests)
      allow get: if resource.data.isPublished == true;

      // Allow checking if document exists (for URL availability)
      allow get: if true;
    }

    // Notes collection - allow all operations for authenticated users on their own notes
    match /notes/{noteId} {
      // Allow read for authenticated users (they can only query their own notes via userId filter)
      allow read: if isAuthenticated();

      // Allow create if authenticated and userId matches
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'userId', 'title', 'content']) &&
                       request.auth.uid == request.resource.data.userId;

      // Allow update/delete if authenticated and userId matches
      allow update, delete: if isAuthenticated() &&
                               resource.data.userId == request.auth.uid;
    }

    // RSVPs collection
    match /rsvps/{rsvpId} {
      // Owner can read all RSVPs for their wedding
      allow read: if isAuthenticated() &&
                     exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                     get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;

      // Owner can update/delete RSVPs
      allow update, delete: if isAuthenticated() &&
                               exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                               get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;

      // Anyone can create RSVP (guests submitting)
      allow create: if request.resource.data.keys().hasAll(['websiteId', 'weddingId', 'name', 'email', 'status', 'guestCount']) &&
                       exists(/databases/$(database)/documents/weddingWebsites/$(request.resource.data.websiteId)) &&
                       get(/databases/$(database)/documents/weddingWebsites/$(request.resource.data.websiteId)).data.isPublished == true;
    }

    // Wedding Website RSVPs collection - RSVPs submitted through wedding website
    match /weddingWebsiteRSVPs/{rsvpId} {
      // Owner can read all RSVPs for their wedding website
      allow read: if isAuthenticated() &&
                     exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                     get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;

      // Owner can update/delete RSVPs
      allow update, delete: if isAuthenticated() &&
                               exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                               get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;

      // Anyone can create RSVP (guests submitting through website)
      // Allow if website exists (removed isPublished check for testing)
      allow create: if request.resource.data.keys().hasAll(['websiteId', 'weddingId', 'name', 'email', 'status', 'guestCount']) &&
                       exists(/databases/$(database)/documents/weddingWebsites/$(request.resource.data.websiteId));
    }

    // Dashboards collection - user's dashboard layout preferences
    match /dashboards/{dashboardId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();

      // Allow write/update if authenticated and (demo user OR document belongs to user OR user is creating their own document)
      allow write, update: if isAuthenticated() &&
                              (isDemoUser() ||
                               resource.data.userId == request.auth.uid ||
                               request.resource.data.userId == request.auth.uid);

      // Allow create if authenticated and userId in document matches auth user OR is demo user
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        request.resource.data.userId == request.auth.uid);

      // Allow delete if authenticated and (demo user OR document belongs to user)
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        resource.data.userId == request.auth.uid);
    }

    // Subscriptions collection - user's subscription data
    match /subscriptions/{userId} {
      // User can read their own subscription
      allow read: if isAuthenticated() && isOwner(userId);

      // User can create their own subscription (trial)
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       request.resource.data.userId == request.auth.uid;

      // User can update their own subscription (cancel, reactivate)
      allow update: if isAuthenticated() && isOwner(userId);

      // Only system can delete (via Cloud Functions)
      allow delete: if false;
    }

    // Payments collection - payment history
    match /payments/{paymentId} {
      // User can read their own payments
      allow read: if isAuthenticated() &&
                     resource.data.userId == request.auth.uid;

      // Only Stripe webhook can create/update payments
      allow create, update: if false;

      // User cannot delete payments
      allow delete: if false;
    }

    // Usage Stats collection - user's usage statistics
    match /usageStats/{userId} {
      // User can read their own stats, admins can read all
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());

      // User can create/update their own stats
      allow create, update: if isAuthenticated() &&
                               isOwner(userId) &&
                               request.resource.data.userId == request.auth.uid;

      // User cannot delete stats
      allow delete: if false;
    }

    // Shopping collection - user's shopping list
    match /shopping/{itemId} {
      // Allow read if authenticated and (demo user OR user owns the wedding)
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow create if authenticated and (demo user OR user owns the wedding)
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow update if authenticated and (demo user OR user owns the wedding)
      allow update: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow delete if authenticated and (demo user OR user owns the wedding)
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Mood Entries collection - Svatbot AI Coach mood tracking
    match /moodEntries/{entryId} {
      // Allow read if authenticated and user owns the entry
      allow read: if isAuthenticated() &&
                     resource.data.userId == request.auth.uid;

      // Allow create if authenticated and userId matches
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['userId', 'weddingId', 'mood', 'stressLevel', 'energyLevel']) &&
                       request.auth.uid == request.resource.data.userId &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid;

      // Allow update if authenticated and user owns the entry
      allow update: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid;

      // Allow delete if authenticated and user owns the entry
      allow delete: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid;
    }

    // Onboarding collection - User onboarding state
    match /onboarding/{userId} {
      // User can read their own onboarding state
      allow read: if isAuthenticated() && isOwner(userId);

      // User can create their own onboarding state
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       request.resource.data.userId == request.auth.uid;

      // User can update their own onboarding state
      allow update: if isAuthenticated() && isOwner(userId);

      // User can delete their own onboarding state
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Calendar Events collection - Custom calendar events
    match /calendarEvents/{eventId} {
      // Allow read if authenticated and (demo user OR user owns the wedding)
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow create if authenticated and (demo user OR user owns the wedding)
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'userId', 'title', 'type', 'source']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid &&
                         request.auth.uid == request.resource.data.userId));

      // Allow update if authenticated and (demo user OR user owns the wedding)
      allow update: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow delete if authenticated and (demo user OR user owns the wedding)
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Admin Collections

    // User Analytics - Users can write their own, admins can read all
    match /userAnalytics/{userId} {
      // Admins can read all analytics
      allow read: if isAdmin();

      // Users can create and update their own analytics
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);

      // Users cannot delete analytics
      allow delete: if false;
    }

    // Admin Messages - Bidirectional communication
    match /adminMessages/{conversationId} {
      // Users can read their own conversations
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin());

      // Users can create new conversations
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;

      // Users and admins can update (add messages)
      allow update: if isAuthenticated() &&
                       (resource.data.userId == request.auth.uid || isAdmin());

      // Only admins can delete
      allow delete: if isAdmin();
    }

    // Feedback - Users can create, admins can manage
    match /feedback/{feedbackId} {
      // Users can read their own feedback, admins can read all
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin());

      // Users can create feedback
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'userEmail', 'type', 'subject', 'message', 'status']);

      // Admins can update everything
      allow update: if isAdmin();

      // Users can only update their own feedback to:
      // - Add messages to conversation
      // - Mark as read (unreadAdminReplies, lastReadByUser)
      // - Notify admin about new messages (unreadUserReplies)
      // - Update updatedAt timestamp
      allow update: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid &&
                       // Get the changed fields
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['conversation', 'unreadAdminReplies', 'lastReadByUser', 'unreadUserReplies', 'updatedAt']);

      // Only admins can delete
      allow delete: if isAdmin();
    }

    // Subscriptions - Enhanced with admin access
    match /subscriptions/{userId} {
      // User can read their own subscription, admins can read all
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());

      // User can create their own subscription (trial)
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       request.resource.data.userId == request.auth.uid;

      // User can update their own subscription, admins can update all
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());

      // Only admins can delete
      allow delete: if isAdmin();
    }

    // Payments - Admin and user read access
    match /payments/{paymentId} {
      // User can read their own payments, admins can read all
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin());

      // Only system/Stripe webhook can create/update payments
      allow create, update: if false;

      // Only admins can delete (for refunds/corrections)
      allow delete: if isAdmin();
    }

    // Affiliate Program
    match /affiliatePartners/{partnerId} {
      // Partners can read their own data, admins can read all
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin());

      // Users can apply to become partners
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;

      // Only admins can update (approve, suspend)
      allow update: if isAdmin();

      // Only admins can delete
      allow delete: if isAdmin();
    }

    match /affiliateReferrals/{referralId} {
      // Affiliates can read their own referrals, admins can read all
      allow read: if isAuthenticated() &&
                     (exists(/databases/$(database)/documents/affiliatePartners/$(resource.data.affiliateId)) &&
                      get(/databases/$(database)/documents/affiliatePartners/$(resource.data.affiliateId)).data.userId == request.auth.uid) ||
                     isAdmin();

      // Only system can create referrals
      allow create: if false;

      // Only admins can update (approve commissions)
      allow update: if isAdmin();

      // Only admins can delete
      allow delete: if isAdmin();
    }

    // Admin Users - Super admin only
    match /adminUsers/{adminId} {
      allow read: if isAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // ========================================
    // AFFILIATE SYSTEM
    // ========================================

    // Helper function for affiliate partners
    function isAffiliatePartner(affiliateId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/affiliatePartners/$(affiliateId)) &&
             get(/databases/$(database)/documents/affiliatePartners/$(affiliateId)).data.userId == request.auth.uid;
    }

    // Affiliate Applications
    match /affiliateApplications/{applicationId} {
      // Anyone can create an application
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['firstName', 'lastName', 'email', 'motivation']) &&
                       request.resource.data.email == request.auth.token.email;

      // User can read their own application
      allow read: if isAuthenticated() &&
                     (resource.data.email == request.auth.token.email || isAdmin());

      // Only admins can update/delete
      allow update, delete: if isAdmin();
    }

    // Affiliate Partners
    match /affiliatePartners/{affiliateId} {
      // Allow public read for all partners (needed for tracking queries)
      // The tracking code filters by status='active' in the query
      allow read: if true;

      // Only admins can create partners
      allow create: if isAdmin();

      // Admins can update everything
      allow update: if isAdmin();

      // Partner can update their own payout details, contact info, and billing address
      allow update: if isAuthenticated() &&
                       isAffiliatePartner(affiliateId) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['payoutDetails', 'payoutMethod', 'phone', 'website', 'notes', 'billingAddress', 'updatedAt']);

      // Allow anyone to increment click stats (for tracking)
      // When using increment() on nested fields like stats.totalClicks,
      // we need to allow updates without strict key checking
      // Just verify that critical fields don't change
      allow update: if request.resource.data.userId == resource.data.userId &&
                       request.resource.data.status == resource.data.status &&
                       request.resource.data.referralCode == resource.data.referralCode;

      // Only super admin can delete
      allow delete: if isSuperAdmin();
    }

    // Commissions
    match /commissions/{commissionId} {
      // Partner can read their own commissions
      allow read: if isAuthenticated() &&
                     (isAffiliatePartner(resource.data.affiliateId) || isAdmin());

      // Only system/admin can create commissions
      allow create: if isAdmin();

      // Only admin can update commissions
      allow update: if isAdmin();

      // Only super admin can delete
      allow delete: if isSuperAdmin();
    }

    // Payouts
    match /payouts/{payoutId} {
      // Partner can read their own payouts
      allow read: if isAuthenticated() &&
                     (isAffiliatePartner(resource.data.affiliateId) || isAdmin());

      // Partner can create payout request
      allow create: if isAuthenticated() &&
                       isAffiliatePartner(request.resource.data.affiliateId) &&
                       request.resource.data.status == 'pending';

      // Only admin can update/process payouts
      allow update: if isAdmin();

      // Only super admin can delete
      allow delete: if isSuperAdmin();
    }

    // Affiliate Clicks (tracking)
    match /affiliateClicks/{clickId} {
      // Public can create clicks (for tracking)
      allow create: if true;

      // Only admin can read/update clicks
      allow read, update: if isAdmin();

      // Only super admin can delete
      allow delete: if isSuperAdmin();
    }

    // Affiliate Stats (daily aggregated stats with analytics)
    match /affiliateStats/{statsId} {
      // Partner can read their own stats, admins can read all
      allow read: if isAuthenticated() &&
                     (isAffiliatePartner(resource.data.affiliateId) || isAdmin());

      // Anyone can create daily stats (for tracking)
      // Must have basic required fields
      allow create: if request.resource.data.keys().hasAll(['affiliateId', 'affiliateCode', 'date', 'clicks']) &&
                       request.resource.data.clicks >= 0;

      // Anyone can increment stats (for tracking)
      // When using increment(), we can't check the final value
      // Just verify that core fields don't change
      allow update: if request.resource.data.affiliateId == resource.data.affiliateId &&
                       request.resource.data.affiliateCode == resource.data.affiliateCode &&
                       request.resource.data.date == resource.data.date;

      // Only admins can delete
      allow delete: if isAdmin();
    }

    // Affiliate Config
    match /affiliateConfig/settings {
      // Anyone can read config (for public info)
      allow read: if true;

      // Only admin can update config
      allow write: if isAdmin();
    }

    // User Affiliate References (links users to their referring affiliate)
    match /userAffiliateRefs/{refId} {
      // Allow system to create references (during registration)
      allow create: if true;

      // Users can read their own references
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin());

      // Allow system/admin to update (for conversion tracking)
      // Just verify that core fields don't change
      allow update: if request.resource.data.userId == resource.data.userId &&
                       request.resource.data.affiliateId == resource.data.affiliateId &&
                       request.resource.data.affiliateCode == resource.data.affiliateCode;

      // Only admin can delete
      allow delete: if isAdmin();
    }

    // Commissions (affiliate earnings records)
    match /commissions/{commissionId} {
      // Affiliate partners can read their own commissions
      allow read: if isAuthenticated() &&
                     (resource.data.affiliateId != null &&
                      isAffiliatePartner(resource.data.affiliateId)) ||
                     isAdmin();

      // Only system/admin can create commissions (from webhook)
      allow create: if true;

      // Only admin can update commissions (for status changes)
      allow update: if isAdmin();

      // Only admin can delete
      allow delete: if isAdmin();
    }

    // Payouts (affiliate payout requests)
    match /payouts/{payoutId} {
      // Affiliate partners can read their own payouts
      allow read: if isAuthenticated() &&
                     (resource.data.affiliateId != null &&
                      isAffiliatePartner(resource.data.affiliateId)) ||
                     isAdmin();

      // Affiliate partners can create payout requests
      allow create: if isAuthenticated() &&
                       request.resource.data.affiliateId != null &&
                       isAffiliatePartner(request.resource.data.affiliateId);

      // Only admin can update payouts (for approval/rejection)
      allow update: if isAdmin();

      // Only admin can delete
      allow delete: if isAdmin();
    }

    // Email Logs - Admin only read, system write
    match /emailLogs/{logId} {
      // Only admins can read email logs
      allow read: if isAdmin();

      // Only system/cloud functions can write
      allow write: if false;
    }

    // Email Stats - Admin only read, system write
    match /emailStats/{statsId} {
      // Only admins can read email stats
      allow read: if isAdmin();

      // Only system/cloud functions can write
      allow write: if false;
    }

    // Shared Playlists - Public read, authenticated write
    match /sharedPlaylists/{shareId} {
      // Anyone can read shared playlists (for DJ access)
      allow read: if true;

      // Only authenticated users can create shared playlists
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'categories', 'createdAt', 'createdBy']) &&
                       request.auth.uid == request.resource.data.createdBy;

      // Only creator can update/delete
      allow update, delete: if isAuthenticated() &&
                               resource.data.createdBy == request.auth.uid;
    }

    // Vendor Reviews - Users can review vendors, admins moderate
    match /vendorReviews/{reviewId} {
      // Reading:
      // - Anyone can read approved reviews
      // - Authors can read their own reviews (any status)
      // - Admins can read all reviews
      allow read: if resource.data.status == 'approved' 
        || (isAuthenticated() && resource.data.userId == request.auth.uid)
        || isAdmin();
      
      // Creating:
      // - Only authenticated users can create reviews
      // - User must be the author (userId matches auth.uid)
      // - Initial status must be 'pending'
      // - Rating must be between 1-5
      // - Text must be at least 1 character
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.status == 'pending'
        && request.resource.data.rating >= 1 
        && request.resource.data.rating <= 5
        && request.resource.data.text.size() >= 1
        && request.resource.data.ratings.quality >= 1
        && request.resource.data.ratings.quality <= 5
        && request.resource.data.ratings.communication >= 1
        && request.resource.data.ratings.communication <= 5
        && request.resource.data.ratings.value >= 1
        && request.resource.data.ratings.value <= 5
        && request.resource.data.ratings.professionalism >= 1
        && request.resource.data.ratings.professionalism <= 5;
      
      // Updating:
      // - Authors can update their own pending reviews
      // - Admins can update any review (for moderation)
      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.userId && resource.data.status == 'pending')
        || isAdmin()
      );
      
      // Deleting:
      // - Authors can delete their own reviews
      // - Admins can delete any review
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId
        || isAdmin()
      );
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
