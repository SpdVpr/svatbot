rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isDemoUser() {
      // Demo user has specific UID
      return request.auth != null && request.auth.uid == '1QyfaI0JWugRDw6SP0XtlL1cRUf2';
    }



    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);

      // Wedding subcollection (music, settings, etc.)
      match /wedding/{document=**} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Weddings collection
    match /weddings/{weddingId} {
      allow read: if isAuthenticated() &&
                     (isOwner(resource.data.userId) || isDemoUser());
      allow write: if isAuthenticated() &&
                      (isOwner(resource.data.userId) || isDemoUser());
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       request.resource.data.keys().hasAll(['userId', 'brideName', 'groomName', 'budget', 'style', 'region']) &&
                       request.resource.data.userId == request.auth.uid;
    }

    // Guests collection
    match /guests/{guestId} {
      allow read, write: if isAuthenticated() &&
                            (isDemoUser() ||
                             (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                              get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'firstName', 'lastName']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read, write: if isAuthenticated() &&
                            (isDemoUser() ||
                             (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                              get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'title', 'category', 'status']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Budget items collection
    match /budgetItems/{budgetItemId} {
      allow read, write: if isAuthenticated() &&
                            (isDemoUser() ||
                             (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                              get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'name', 'category', 'budgetedAmount']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Timeline events collection
    match /timelineEvents/{eventId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Milestones collection
    match /milestones/{milestoneId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Gift items collection
    match /giftItems/{giftId} {
      allow read, write: if isAuthenticated() &&
                            exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                            get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'name', 'category', 'price', 'quantity']) &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid;
    }

    // Seating plans collection
    match /seatingPlans/{planId} {
      // Allow read if authenticated and user owns the wedding
      allow read: if isAuthenticated() &&
                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid);

      // Allow create if authenticated and user owns the wedding
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'name']) &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid;

      // Allow update if authenticated and user owns the wedding (check both old and new data)
      allow update: if isAuthenticated() &&
                       ((exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid) ||
                        (exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow delete if authenticated and user owns the wedding
      allow delete: if isAuthenticated() &&
                       exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;
    }

    // Moodboard collection
    match /moodboards/{moodboardId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow write: if isAuthenticated() &&
                      !isDemoUser() &&
                      exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       !isDemoUser() &&
                       request.resource.data.keys().hasAll(['weddingId', 'userId', 'url', 'source', 'isFavorite', 'tags']) &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid &&
                       request.auth.uid == request.resource.data.userId;
    }

    // Menu items collection
    match /menuItems/{menuItemId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Drink items collection
    match /drinkItems/{drinkItemId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Accommodations collection
    match /accommodations/{accommodationId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Rooms collection (sub-collection of accommodations)
    match /rooms/{roomId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/accommodations/$(resource.data.accommodationId)) &&
                                      exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Moodboards collection
    match /moodboards/{moodboardId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Moodboard Folders collection (Pinterest-style boards)
    match /moodboardFolders/{folderId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['name', 'weddingId', 'userId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid &&
                         request.auth.uid == request.resource.data.userId));
      allow update: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Notes collection
    match /notes/{noteId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Music collection
    match /music/{musicId} {
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // AI Timeline Items collection
    match /aiTimelineItems/{itemId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Wedding Day Timeline collection
    match /weddingDayTimeline/{itemId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Wedding Websites collection
    match /weddingWebsites/{websiteId} {
      allow read, write, create: if isAuthenticated() &&
                                    (isDemoUser() ||
                                     (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                      get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Public collections (read-only for authenticated users)

    // Venues collection (public read, admin write)
    match /venues/{venueId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write (handled by Cloud Functions)
    }

    // Vendors collection (user's personal vendors list)
    match /vendors/{vendorId} {
      // Allow read if authenticated and user owns the wedding
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow create if authenticated and user owns the wedding (use request.resource for new documents)
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'name', 'category']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow update/delete if authenticated and user owns the wedding
      allow update, delete: if isAuthenticated() &&
                               (isDemoUser() ||
                                (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                                 get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Services collection
    match /services/{serviceId} {
      allow read: if resource.data.active == true ||
                     isOwner(resource.data.userId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow create: if isAuthenticated() &&
                       request.auth.token.role in ['vendor', 'admin', 'super_admin'];
      allow update: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow delete: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if resource.data.verified == true ||
                     isOwner(resource.data.userId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.userId;
      allow update: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow delete: if isOwner(resource.data.userId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
    }

    // Inquiries collection
    match /inquiries/{inquiryId} {
      allow read: if isOwner(resource.data.userId) ||
                     isOwner(resource.data.vendorUserId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) ||
                       isOwner(resource.data.vendorUserId) ||
                       (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow delete: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
    }

    // Favorites collection
    match /favorites/{favoriteId} {
      allow read, write: if isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
    }

    // Analytics collection
    match /analytics/{analyticsId} {
      allow read: if isOwner(resource.data.vendorUserId) ||
                     (isAuthenticated() && request.auth.token.role in ['admin', 'super_admin']);
      allow write: if false; // Only server can write analytics
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow update: if isOwner(resource.data.userId); // For marking as read
      allow create, delete: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
    }

    // Wedding notifications collection
    match /weddingNotifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow update: if isAuthenticated() && isOwner(resource.data.userId); // For marking as read
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.userId &&
                       request.resource.data.keys().hasAll(['userId', 'type', 'title', 'message', 'priority', 'category', 'read']);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Admin logs collection
    match /adminLogs/{logId} {
      allow read: if isAuthenticated() && request.auth.token.role in ['admin', 'super_admin'];
      allow write: if false; // Only server can write logs
    }

    // Task templates collection (public read, admin write)
    match /taskTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write
    }

    // Checklist completed items collection
    match /checklist_completed/{weddingId} {
      allow read, write: if isAuthenticated() &&
                            exists(/databases/$(database)/documents/weddings/$(weddingId)) &&
                            get(/databases/$(database)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                       exists(/databases/$(database)/documents/weddings/$(weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
    }

    // Marketplace vendors collection
    match /marketplaceVendors/{vendorId} {
      // Anyone can read marketplace vendors (public marketplace)
      allow read: if true;

      // Anyone authenticated can create a vendor registration (will be pending approval)
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['name', 'category', 'email', 'phone']) &&
                       request.resource.data.verified == false &&
                       request.resource.data.status == 'pending';

      // Only admins can update/delete (handled by admin panel)
      allow update, delete: if false;
    }

    // Wedding websites collection
    match /weddingWebsites/{websiteId} {
      // Owner can read/write their own website
      allow read, write: if isAuthenticated() &&
                            resource.data.userId == request.auth.uid;

      // Owner can create website
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'userId', 'customUrl', 'template']) &&
                       request.auth.uid == request.resource.data.userId;

      // Allow list/query for owner (to find website by weddingId)
      allow list: if isAuthenticated() &&
                     request.auth.uid != null;

      // Public read for published websites (for guests)
      allow get: if resource.data.isPublished == true;

      // Allow checking if document exists (for URL availability)
      allow get: if true;
    }

    // Notes collection - allow all operations for authenticated users on their own notes
    match /notes/{noteId} {
      // Allow read for authenticated users (they can only query their own notes via userId filter)
      allow read: if isAuthenticated();

      // Allow create if authenticated and userId matches
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['weddingId', 'userId', 'title', 'content']) &&
                       request.auth.uid == request.resource.data.userId;

      // Allow update/delete if authenticated and userId matches
      allow update, delete: if isAuthenticated() &&
                               resource.data.userId == request.auth.uid;
    }

    // RSVPs collection
    match /rsvps/{rsvpId} {
      // Owner can read all RSVPs for their wedding
      allow read: if isAuthenticated() &&
                     exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                     get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;

      // Owner can update/delete RSVPs
      allow update, delete: if isAuthenticated() &&
                               exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                               get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid;

      // Anyone can create RSVP (guests submitting)
      allow create: if request.resource.data.keys().hasAll(['websiteId', 'weddingId', 'name', 'email', 'status', 'guestCount']) &&
                       exists(/databases/$(database)/documents/weddingWebsites/$(request.resource.data.websiteId)) &&
                       get(/databases/$(database)/documents/weddingWebsites/$(request.resource.data.websiteId)).data.isPublished == true;
    }

    // Dashboards collection - user's dashboard layout preferences
    match /dashboards/{dashboardId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();

      // Allow write/update if authenticated and (demo user OR document belongs to user OR user is creating their own document)
      allow write, update: if isAuthenticated() &&
                              (isDemoUser() ||
                               resource.data.userId == request.auth.uid ||
                               request.resource.data.userId == request.auth.uid);

      // Allow create if authenticated and userId in document matches auth user OR is demo user
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        request.resource.data.userId == request.auth.uid);

      // Allow delete if authenticated and (demo user OR document belongs to user)
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        resource.data.userId == request.auth.uid);
    }

    // Subscriptions collection - user's subscription data
    match /subscriptions/{userId} {
      // User can read their own subscription
      allow read: if isAuthenticated() && isOwner(userId);

      // User can create their own subscription (trial)
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       request.resource.data.userId == request.auth.uid;

      // User can update their own subscription (cancel, reactivate)
      allow update: if isAuthenticated() && isOwner(userId);

      // Only system can delete (via Cloud Functions)
      allow delete: if false;
    }

    // Payments collection - payment history
    match /payments/{paymentId} {
      // User can read their own payments
      allow read: if isAuthenticated() &&
                     resource.data.userId == request.auth.uid;

      // Only Stripe webhook can create/update payments
      allow create, update: if false;

      // User cannot delete payments
      allow delete: if false;
    }

    // Usage Stats collection - user's usage statistics
    match /usageStats/{userId} {
      // User can read their own stats
      allow read: if isAuthenticated() && isOwner(userId);

      // User can create/update their own stats
      allow create, update: if isAuthenticated() &&
                               isOwner(userId) &&
                               request.resource.data.userId == request.auth.uid;

      // User cannot delete stats
      allow delete: if false;
    }

    // Shopping collection - user's shopping list
    match /shopping/{itemId} {
      // Allow read if authenticated and (demo user OR user owns the wedding)
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow create if authenticated and (demo user OR user owns the wedding)
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow update if authenticated and (demo user OR user owns the wedding)
      allow update: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow delete if authenticated and (demo user OR user owns the wedding)
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Mood Entries collection - Svatbot AI Coach mood tracking
    match /moodEntries/{entryId} {
      // Allow read if authenticated and user owns the entry
      allow read: if isAuthenticated() &&
                     resource.data.userId == request.auth.uid;

      // Allow create if authenticated and userId matches
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['userId', 'weddingId', 'mood', 'stressLevel', 'energyLevel']) &&
                       request.auth.uid == request.resource.data.userId &&
                       exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid;

      // Allow update if authenticated and user owns the entry
      allow update: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid;

      // Allow delete if authenticated and user owns the entry
      allow delete: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid;
    }

    // Onboarding collection - User onboarding state
    match /onboarding/{userId} {
      // User can read their own onboarding state
      allow read: if isAuthenticated() && isOwner(userId);

      // User can create their own onboarding state
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       request.resource.data.userId == request.auth.uid;

      // User can update their own onboarding state
      allow update: if isAuthenticated() && isOwner(userId);

      // User can delete their own onboarding state
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Calendar Events collection - Custom calendar events
    match /calendarEvents/{eventId} {
      // Allow read if authenticated and (demo user OR user owns the wedding)
      allow read: if isAuthenticated() &&
                     (isDemoUser() ||
                      (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                       get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow create if authenticated and (demo user OR user owns the wedding)
      allow create: if isAuthenticated() &&
                       (isDemoUser() ||
                        (request.resource.data.keys().hasAll(['weddingId', 'userId', 'title', 'type', 'source']) &&
                         exists(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(request.resource.data.weddingId)).data.userId == request.auth.uid &&
                         request.auth.uid == request.resource.data.userId));

      // Allow update if authenticated and (demo user OR user owns the wedding)
      allow update: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));

      // Allow delete if authenticated and (demo user OR user owns the wedding)
      allow delete: if isAuthenticated() &&
                       (isDemoUser() ||
                        (exists(/databases/$(database)/documents/weddings/$(resource.data.weddingId)) &&
                         get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.userId == request.auth.uid));
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
