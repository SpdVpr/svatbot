#!/usr/bin/env node

/**
 * Script to create demo account in Firebase
 * Usage: node scripts/create-demo-account.js
 */

const admin = require('firebase-admin');
const path = require('path');
const { createDemoGuests } = require('./guests-data');
const { createDemoTasks, createDemoBudget } = require('./tasks-budget-data');

// Initialize Firebase Admin SDK
const serviceAccountPath = path.join(__dirname, '../firebase-service-account.json');

try {
  const serviceAccount = require(serviceAccountPath);
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: 'https://svatbot-app-default-rtdb.europe-west1.firebasedatabase.app'
  });
} catch (error) {
  console.log('‚ö†Ô∏è  Service account not found, using default credentials');
  admin.initializeApp();
}

const auth = admin.auth();
const db = admin.firestore();

async function cleanupOldDemoData(userId) {
  console.log('üßπ Cleaning up old demo data...');

  // Delete all collections for this user
  const collections = [
    'weddings',
    'guests',
    'tasks',
    'budgetItems',
    'timelineEvents',
    'milestones',
    'menuItems',
    'drinkItems',
    'accommodations',
    'rooms',
    'moodboards',
    'vendors',
    'music',
    'notes',
    'aiTimelineItems',
    'userProfiles'
  ];

  for (const collectionName of collections) {
    const snapshot = await db.collection(collectionName)
      .where('userId', '==', userId)
      .get();

    if (!snapshot.empty) {
      const batch = db.batch();
      snapshot.docs.forEach(doc => batch.delete(doc.ref));
      await batch.commit();
      console.log(`  ‚úÖ Deleted ${snapshot.size} documents from ${collectionName}`);
    }
  }

  // Also delete by weddingId (need to find all weddings first)
  const weddingsSnapshot = await db.collection('weddings')
    .where('userId', '==', userId)
    .get();

  const weddingIds = weddingsSnapshot.docs.map(doc => doc.id);

  if (weddingIds.length > 0) {
    const weddingCollections = [
      'guests',
      'tasks',
      'budgetItems',
      'timelineEvents',
      'milestones',
      'menuItems',
      'drinkItems',
      'accommodations',
      'rooms',
      'moodboards',
      'vendors',
      'music',
      'notes',
      'aiTimelineItems'
    ];

    for (const collectionName of weddingCollections) {
      for (const weddingId of weddingIds) {
        const snapshot = await db.collection(collectionName)
          .where('weddingId', '==', weddingId)
          .get();

        if (!snapshot.empty) {
          const batch = db.batch();
          snapshot.docs.forEach(doc => batch.delete(doc.ref));
          await batch.commit();
          console.log(`  ‚úÖ Deleted ${snapshot.size} documents from ${collectionName} for wedding ${weddingId}`);
        }
      }
    }
  }

  console.log('‚úÖ Cleanup complete');
}

async function createDemoAccount() {
  try {
    console.log('üé≠ Creating fresh demo account...');

    const demoEmail = 'demo@svatbot.cz';
    const demoPassword = 'demo123';

    // Check if demo user already exists
    let demoUser;
    try {
      demoUser = await auth.getUserByEmail(demoEmail);
      console.log('‚úÖ Demo user already exists:', demoUser.uid);

      // Clean up old data
      await cleanupOldDemoData(demoUser.uid);
    } catch (error) {
      if (error.code === 'auth/user-not-found') {
        // Create demo user
        demoUser = await auth.createUser({
          email: demoEmail,
          password: demoPassword,
          displayName: 'Demo U≈æivatel',
          emailVerified: true
        });
        console.log('‚úÖ Demo user created:', demoUser.uid);
      } else {
        throw error;
      }
    }

    // Create demo wedding data
    const demoWeddingData = {
      userId: demoUser.uid,
      brideName: 'Jana',
      groomName: 'Petr',
      weddingDate: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000), // 180 days from now
      estimatedGuestCount: 85,
      budget: 450000,
      style: 'classic',
      region: 'Praha',
      status: 'planning',
      progress: {
        overall: 73,
        foundation: 100,
        venue: 85,
        guests: 80,
        budget: 65,
        design: 45,
        organization: 30,
        final: 0
      },
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };

    // Save wedding to Firestore
    const weddingRef = await db.collection('weddings').add(demoWeddingData);
    console.log('‚úÖ Demo wedding created:', weddingRef.id);

    // Create demo user profile
    const demoUserData = {
      email: demoEmail,
      displayName: 'Demo U≈æivatel',
      firstName: 'Demo',
      lastName: 'U≈æivatel',
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };

    await db.collection('users').doc(demoUser.uid).set(demoUserData);
    console.log('‚úÖ Demo user profile created');

    // Create demo tasks - realistic wedding planning tasks
    console.log('üìã Creating demo tasks...');
    const demoTasks = createDemoTasks(weddingRef.id);

    // Save demo tasks
    const taskBatch = db.batch();
    demoTasks.forEach(task => {
      const taskRef = db.collection('tasks').doc();
      taskBatch.set(taskRef, task);
    });
    await taskBatch.commit();
    console.log(`‚úÖ Demo tasks created (${demoTasks.length} tasks)`);

    // Create demo guests - 40 guests for a small wedding
    console.log('üë• Creating demo guests...');
    const demoGuests = createDemoGuests(weddingRef.id, demoUser.uid);

    const guestBatch = db.batch();
    demoGuests.forEach(guest => {
      const guestRef = db.collection('guests').doc();
      guestBatch.set(guestRef, guest);
    });
    await guestBatch.commit();
    console.log('‚úÖ Demo guests created');

    // Create demo accommodations
    console.log('üè® Creating demo accommodations...');
    const demoAccommodations = [
      {
        weddingId: weddingRef.id,
        name: 'Hotel Ch√¢teau Mcely',
        description: 'Luxusn√≠ boutique hotel v kr√°sn√©m prost≈ôed√≠ s wellness a golfov√Ωm h≈ôi≈°tƒõm',
        address: {
          street: 'Mcely 61',
          city: 'Mcely',
          postalCode: '289 36',
          country: 'ƒåesk√° republika'
        },
        contactInfo: {
          email: 'info@chateaumcely.cz',
          phone: '+420 325 600 000',
          website: 'https://www.chateaumcely.cz'
        },
        website: 'https://www.chateaumcely.cz',
        images: [
          'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800',
          'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=800',
          'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=800'
        ],
        amenities: ['WiFi', 'Parkov√°n√≠', 'Sn√≠danƒõ', 'Wellness', 'Restaurant', 'Bar', 'Golf'],
        rooms: [],
        policies: {
          checkIn: '15:00',
          checkOut: '11:00',
          cancellationPolicy: 'Zru≈°en√≠ zdarma do 7 dn√≠ p≈ôed p≈ô√≠jezdem',
          petPolicy: 'Dom√°c√≠ mazl√≠ƒçci povoleni za p≈ô√≠platek',
          smokingPolicy: 'Neku≈ô√°ck√Ω hotel',
          childrenPolicy: 'Dƒõti v√≠t√°ny',
          additionalFees: ['Parkov√°n√≠: 200 Kƒç/den', 'Dom√°c√≠ mazl√≠ƒçek: 500 Kƒç/noc']
        },
        isActive: true,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        weddingId: weddingRef.id,
        name: 'Penzion U L√≠py',
        description: 'Rodinn√Ω penzion s √∫tuln√Ωmi pokoji a dom√°c√≠ atmosf√©rou',
        address: {
          street: 'Hlavn√≠ 123',
          city: 'Mcely',
          postalCode: '289 36',
          country: 'ƒåesk√° republika'
        },
        contactInfo: {
          email: 'info@penzionulipy.cz',
          phone: '+420 325 123 456',
          website: 'https://www.penzionulipy.cz'
        },
        website: 'https://www.penzionulipy.cz',
        images: [
          'https://images.unsplash.com/photo-1564501049412-61c2a3083791?w=800',
          'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=800'
        ],
        amenities: ['WiFi', 'Parkov√°n√≠', 'Sn√≠danƒõ', 'Zahrada', 'Gril'],
        rooms: [],
        policies: {
          checkIn: '14:00',
          checkOut: '10:00',
          cancellationPolicy: 'Zru≈°en√≠ zdarma do 3 dn√≠ p≈ôed p≈ô√≠jezdem',
          petPolicy: 'Dom√°c√≠ mazl√≠ƒçci povoleni',
          smokingPolicy: 'Kou≈ôen√≠ pouze venku',
          childrenPolicy: 'Dƒõti v√≠t√°ny',
          additionalFees: []
        },
        isActive: true,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      }
    ];

    for (const accommodation of demoAccommodations) {
      const accommodationRef = await db.collection('accommodations').add(accommodation);
      console.log(`‚úÖ Created accommodation: ${accommodation.name}`);

      // Add rooms to first accommodation
      if (accommodation.name === 'Hotel Ch√¢teau Mcely') {
        const rooms = [
          {
            accommodationId: accommodationRef.id,
            weddingId: weddingRef.id,
            name: 'Deluxe pokoj',
            description: 'Prostorn√Ω pokoj s man≈æelskou postel√≠ a v√Ωhledem do zahrady',
            type: 'double',
            capacity: 2,
            maxOccupancy: 2,
            bedConfiguration: [{ type: 'king', count: 1 }],
            pricePerNight: 3500,
            totalPrice: 7000,
            amenities: ['WiFi', 'TV', 'Minibar', 'Klimatizace', 'Koupelna'],
            images: ['https://images.unsplash.com/photo-1590490360182-c33d57733427?w=800'],
            isAvailable: true,
            reservations: [],
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          },
          {
            accommodationId: accommodationRef.id,
            weddingId: weddingRef.id,
            name: 'Superior pokoj',
            description: 'Luxusn√≠ pokoj s balkonem a v√Ωhledem na golf',
            type: 'double',
            capacity: 2,
            maxOccupancy: 3,
            bedConfiguration: [{ type: 'king', count: 1 }],
            pricePerNight: 4200,
            totalPrice: 8400,
            amenities: ['WiFi', 'TV', 'Minibar', 'Klimatizace', 'Koupelna', 'Balkon'],
            images: ['https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=800'],
            isAvailable: true,
            reservations: [],
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          },
          {
            accommodationId: accommodationRef.id,
            weddingId: weddingRef.id,
            name: 'Rodinn√Ω apartm√°n',
            description: 'Prostorn√Ω apartm√°n pro rodiny s dƒõtmi',
            type: 'family',
            capacity: 4,
            maxOccupancy: 4,
            bedConfiguration: [
              { type: 'queen', count: 1 },
              { type: 'single', count: 2 }
            ],
            pricePerNight: 5000,
            totalPrice: 10000,
            amenities: ['WiFi', 'TV', 'Kuchy≈àka', 'Klimatizace', 'Koupelna'],
            images: ['https://images.unsplash.com/photo-1522771739844-6a9f6d5f14af?w=800'],
            isAvailable: true,
            reservations: [],
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          },
          {
            accommodationId: accommodationRef.id,
            weddingId: weddingRef.id,
            name: 'Prezidentsk√© apartm√°',
            description: 'Nejluxusnƒõj≈°√≠ apartm√° s vlastn√≠m wellness',
            type: 'suite',
            capacity: 2,
            maxOccupancy: 4,
            bedConfiguration: [
              { type: 'king', count: 1 },
              { type: 'sofa', count: 1 }
            ],
            pricePerNight: 8000,
            totalPrice: 16000,
            amenities: ['WiFi', 'TV', 'Minibar', 'Klimatizace', 'Koupelna', 'Balkon', 'V√≠≈ôivka', 'Sauna'],
            images: ['https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=800'],
            isAvailable: true,
            reservations: [],
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          }
        ];

        const roomBatch = db.batch();
        rooms.forEach(room => {
          const roomRef = db.collection('rooms').doc();
          roomBatch.set(roomRef, room);
        });
        await roomBatch.commit();
        console.log(`‚úÖ Added rooms to ${accommodation.name}`);
      }

      // Add rooms to second accommodation
      if (accommodation.name === 'Penzion U L√≠py') {
        const rooms = [
          {
            accommodationId: accommodationRef.id,
            weddingId: weddingRef.id,
            name: 'Dvoul≈Ø≈ækov√Ω pokoj',
            description: '√ötuln√Ω pokoj s man≈æelskou postel√≠',
            type: 'double',
            capacity: 2,
            maxOccupancy: 2,
            bedConfiguration: [{ type: 'queen', count: 1 }],
            pricePerNight: 1800,
            totalPrice: 3600,
            amenities: ['WiFi', 'TV', 'Koupelna'],
            images: ['https://images.unsplash.com/photo-1564501049412-61c2a3083791?w=800'],
            isAvailable: true,
            reservations: [],
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          },
          {
            accommodationId: accommodationRef.id,
            weddingId: weddingRef.id,
            name: 'T≈ô√≠l≈Ø≈ækov√Ω pokoj',
            description: 'Pokoj pro t≈ôi osoby',
            type: 'triple',
            capacity: 3,
            maxOccupancy: 3,
            bedConfiguration: [
              { type: 'queen', count: 1 },
              { type: 'single', count: 1 }
            ],
            pricePerNight: 2400,
            totalPrice: 4800,
            amenities: ['WiFi', 'TV', 'Koupelna'],
            images: ['https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=800'],
            isAvailable: true,
            reservations: [],
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          },
          {
            accommodationId: accommodationRef.id,
            weddingId: weddingRef.id,
            name: 'Rodinn√Ω pokoj',
            description: 'Prostorn√Ω pokoj pro rodinu',
            type: 'family',
            capacity: 4,
            maxOccupancy: 5,
            bedConfiguration: [
              { type: 'queen', count: 1 },
              { type: 'single', count: 2 }
            ],
            pricePerNight: 3000,
            totalPrice: 6000,
            amenities: ['WiFi', 'TV', 'Koupelna', 'Balkon'],
            images: ['https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800'],
            isAvailable: true,
            reservations: [],
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          }
        ];

        const roomBatch2 = db.batch();
        rooms.forEach(room => {
          const roomRef = db.collection('rooms').doc();
          roomBatch2.set(roomRef, room);
        });
        await roomBatch2.commit();
        console.log(`‚úÖ Added rooms to ${accommodation.name}`);
      }
    }

    // Create demo moodboard images
    console.log('üé® Creating demo moodboard images...');
    const demoMoodboardImages = [
      {
        weddingId: weddingRef.id,
        userId: demoUser.uid,
        url: 'https://images.unsplash.com/photo-1519741497674-611481863552?w=800',
        thumbnailUrl: 'https://images.unsplash.com/photo-1519741497674-611481863552?w=400',
        title: 'Svatebn√≠ m√≠sto - z√°mek',
        description: 'Inspirace pro m√≠sto kon√°n√≠ - romantick√Ω z√°mek',
        source: 'upload',
        sourceUrl: '',
        isFavorite: true,
        tags: ['m√≠sto', 'z√°mek', 'elegance'],
        category: 'venue',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        weddingId: weddingRef.id,
        userId: demoUser.uid,
        url: 'https://images.unsplash.com/photo-1465495976277-4387d4b0b4c6?w=800',
        thumbnailUrl: 'https://images.unsplash.com/photo-1465495976277-4387d4b0b4c6?w=400',
        title: 'Kvƒõtinov√° v√Ωzdoba',
        description: 'B√≠l√© r≈Ø≈æe a eukalyptus',
        source: 'upload',
        sourceUrl: '',
        isFavorite: true,
        tags: ['kvƒõtiny', 'r≈Ø≈æe', 'b√≠l√°'],
        category: 'flowers',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        weddingId: weddingRef.id,
        userId: demoUser.uid,
        url: 'https://images.unsplash.com/photo-1591604466107-ec97de577aff?w=800',
        thumbnailUrl: 'https://images.unsplash.com/photo-1591604466107-ec97de577aff?w=400',
        title: 'Svatebn√≠ ≈°aty',
        description: 'Elegantn√≠ krajkov√© ≈°aty',
        source: 'upload',
        sourceUrl: '',
        isFavorite: false,
        tags: ['≈°aty', 'krajka', 'elegance'],
        category: 'dress',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        weddingId: weddingRef.id,
        userId: demoUser.uid,
        url: 'https://images.unsplash.com/photo-1464366400600-7168b8af9bc3?w=800',
        thumbnailUrl: 'https://images.unsplash.com/photo-1464366400600-7168b8af9bc3?w=400',
        title: 'Svatebn√≠ dort',
        description: 'T≈ô√≠patrov√Ω dort s kvƒõtinovou v√Ωzdobou',
        source: 'upload',
        sourceUrl: '',
        isFavorite: true,
        tags: ['dort', 'kvƒõtiny', 'elegance'],
        category: 'cake',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        weddingId: weddingRef.id,
        userId: demoUser.uid,
        url: 'https://images.unsplash.com/photo-1522673607200-164d1b6ce486?w=800',
        thumbnailUrl: 'https://images.unsplash.com/photo-1522673607200-164d1b6ce486?w=400',
        title: 'Stoln√≠ dekorace',
        description: 'Rustik√°ln√≠ stoln√≠ v√Ωzdoba se sv√≠ƒçkami',
        source: 'upload',
        sourceUrl: '',
        isFavorite: false,
        tags: ['dekorace', 'st≈Øl', 'sv√≠ƒçky'],
        category: 'decoration',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        weddingId: weddingRef.id,
        userId: demoUser.uid,
        url: 'https://images.unsplash.com/photo-1606800052052-a08af7148866?w=800',
        thumbnailUrl: 'https://images.unsplash.com/photo-1606800052052-a08af7148866?w=400',
        title: 'Svatebn√≠ prsteny',
        description: 'Zlat√© snubn√≠ prsteny',
        source: 'upload',
        sourceUrl: '',
        isFavorite: true,
        tags: ['prsteny', 'zlato'],
        category: 'rings',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      }
    ];

    const moodboardBatch = db.batch();
    demoMoodboardImages.forEach(image => {
      const imageRef = db.collection('moodboards').doc();
      moodboardBatch.set(imageRef, image);
    });
    await moodboardBatch.commit();
    console.log('‚úÖ Demo moodboard images created');

    // Create demo menu items
    console.log('üçΩÔ∏è Creating demo menu items...');
    const demoMenuItems = [
      // P≈ôedkrmy
      {
        weddingId: weddingRef.id,
        name: 'Carpaccio z hovƒõz√≠ho',
        description: 'Tenk√© pl√°tky hovƒõz√≠ho masa s rukolou, parmaz√°nem a balsamikem',
        category: 'appetizer',
        estimatedQuantity: 80,
        actualQuantity: null,
        pricePerServing: 150,
        totalCost: 12000,
        currency: 'CZK',
        isVegetarian: false,
        isVegan: false,
        isGlutenFree: true,
        allergens: ['dairy'],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Lehk√Ω p≈ôedkrm',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Grilovan√° zelenina s koz√≠m s√Ωrem',
        description: 'Bakla≈æ√°n, cuketa, paprika s koz√≠m s√Ωrem a bylinkami',
        category: 'appetizer',
        estimatedQuantity: 40,
        actualQuantity: null,
        pricePerServing: 120,
        totalCost: 4800,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: false,
        isGlutenFree: true,
        allergens: ['dairy'],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Vegetari√°nsk√° varianta',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      // Pol√©vky
      {
        weddingId: weddingRef.id,
        name: 'Hovƒõz√≠ v√Ωvar s nudlemi',
        description: 'Tradiƒçn√≠ ƒçesk√Ω v√Ωvar s dom√°c√≠mi nudlemi',
        category: 'soup',
        estimatedQuantity: 80,
        actualQuantity: null,
        pricePerServing: 80,
        totalCost: 6400,
        currency: 'CZK',
        isVegetarian: false,
        isVegan: false,
        isGlutenFree: false,
        allergens: ['gluten', 'eggs'],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Klasika',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Kr√©mov√° d√Ω≈àov√° pol√©vka',
        description: 'Sametov√° pol√©vka z peƒçen√© d√Ωnƒõ s z√°zvorem',
        category: 'soup',
        estimatedQuantity: 40,
        actualQuantity: null,
        pricePerServing: 90,
        totalCost: 3600,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: true,
        isGlutenFree: true,
        allergens: [],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Vegansk√° varianta',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      // Hlavn√≠ j√≠dla
      {
        weddingId: weddingRef.id,
        name: 'Hovƒõz√≠ sv√≠ƒçkov√°',
        description: 'Hovƒõz√≠ sv√≠ƒçkov√° na smetanƒõ s karlovarsk√Ωm knedl√≠kem',
        category: 'main-course',
        estimatedQuantity: 50,
        actualQuantity: null,
        pricePerServing: 280,
        totalCost: 14000,
        currency: 'CZK',
        isVegetarian: false,
        isVegan: false,
        isGlutenFree: false,
        allergens: ['gluten', 'dairy'],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Tradiƒçn√≠ ƒçesk√° klasika',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Grilovan√Ω losos',
        description: 'Grilovan√Ω losos s bylinkov√Ωm m√°slem a grilovanou zeleninou',
        category: 'main-course',
        estimatedQuantity: 35,
        actualQuantity: null,
        pricePerServing: 320,
        totalCost: 11200,
        currency: 'CZK',
        isVegetarian: false,
        isVegan: false,
        isGlutenFree: true,
        allergens: ['fish'],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Pro milovn√≠ky ryb',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Ku≈ôec√≠ supreme',
        description: 'Ku≈ôec√≠ prsa plnƒõn√° ≈°pen√°tem a s√Ωrem feta',
        category: 'main-course',
        estimatedQuantity: 45,
        actualQuantity: null,
        pricePerServing: 250,
        totalCost: 11250,
        currency: 'CZK',
        isVegetarian: false,
        isVegan: false,
        isGlutenFree: true,
        allergens: ['dairy'],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Lehƒç√≠ varianta',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      // P≈ô√≠lohy
      {
        weddingId: weddingRef.id,
        name: 'Op√©kan√© brambory',
        description: 'K≈ôupav√© op√©kan√© brambory s rozmar√Ωnem',
        category: 'side-dish',
        estimatedQuantity: 80,
        actualQuantity: null,
        pricePerServing: 60,
        totalCost: 4800,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: true,
        isGlutenFree: true,
        allergens: [],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Univerz√°ln√≠ p≈ô√≠loha',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'R√Ω≈æe jasm√≠nov√°',
        description: 'Vo≈àav√° jasm√≠nov√° r√Ω≈æe',
        category: 'side-dish',
        estimatedQuantity: 60,
        actualQuantity: null,
        pricePerServing: 40,
        totalCost: 2400,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: true,
        isGlutenFree: true,
        allergens: [],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'K ryb√°m',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Zeleninov√Ω mix',
        description: 'Grilovan√° zelenina - cuketa, paprika, lilek',
        category: 'side-dish',
        estimatedQuantity: 70,
        actualQuantity: null,
        pricePerServing: 70,
        totalCost: 4900,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: true,
        isGlutenFree: true,
        allergens: [],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Zdrav√° p≈ô√≠loha',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      // Dezerty
      {
        weddingId: weddingRef.id,
        name: 'Svatebn√≠ dort',
        description: 'T≈ô√≠patrov√Ω dort s vanilkov√Ωm kr√©mem a ƒçerstv√Ωm ovocem',
        category: 'dessert',
        estimatedQuantity: 100,
        actualQuantity: null,
        pricePerServing: 120,
        totalCost: 12000,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: false,
        isGlutenFree: false,
        allergens: ['gluten', 'dairy', 'eggs'],
        status: 'confirmed',
        vendorName: 'Cukr√°rna U Andƒõla',
        notes: 'Hlavn√≠ dort',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Tiramisu',
        description: 'Italsk√Ω dezert s mascarpone a k√°vou',
        category: 'dessert',
        estimatedQuantity: 50,
        actualQuantity: null,
        pricePerServing: 90,
        totalCost: 4500,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: false,
        isGlutenFree: false,
        allergens: ['gluten', 'dairy', 'eggs'],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Alternativa k dortu',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Ovocn√Ω sal√°t',
        description: 'ƒåerstv√© sez√≥nn√≠ ovoce',
        category: 'dessert',
        estimatedQuantity: 40,
        actualQuantity: null,
        pricePerServing: 70,
        totalCost: 2800,
        currency: 'CZK',
        isVegetarian: true,
        isVegan: true,
        isGlutenFree: true,
        allergens: [],
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Lehk√° varianta',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      }
    ];

    const menuBatch = db.batch();
    demoMenuItems.forEach(item => {
      const itemRef = db.collection('menuItems').doc();
      menuBatch.set(itemRef, item);
    });
    await menuBatch.commit();
    console.log('‚úÖ Demo menu items created');

    // Create demo drink items
    console.log('üç∑ Creating demo drink items...');
    const demoDrinkItems = [
      {
        weddingId: weddingRef.id,
        name: 'Prosecco',
        description: 'Italsk√© ≈°umiv√© v√≠no na p≈ôiv√≠tanou',
        category: 'sparkling',
        estimatedQuantity: 100,
        actualQuantity: null,
        pricePerUnit: 150,
        totalCost: 15000,
        currency: 'CZK',
        unit: 'sklenice',
        isAlcoholic: true,
        status: 'confirmed',
        vendorName: 'Vinot√©ka U Hrozn≈Ø',
        notes: 'Pod√°vat p≈ôi p≈ô√≠chodu host≈Ø',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Dom√°c√≠ limon√°da',
        description: 'Osvƒõ≈æuj√≠c√≠ citronov√° limon√°da',
        category: 'soft-drinks',
        estimatedQuantity: 150,
        actualQuantity: null,
        pricePerUnit: 40,
        totalCost: 6000,
        currency: 'CZK',
        unit: 'sklenice',
        isAlcoholic: false,
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Pro dƒõti a ≈ôidiƒçe',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'B√≠l√© v√≠no - Ryzlink r√Ωnsk√Ω',
        description: 'Such√© b√≠l√© v√≠no z Moravy',
        category: 'wine',
        estimatedQuantity: 80,
        actualQuantity: null,
        pricePerUnit: 120,
        totalCost: 9600,
        currency: 'CZK',
        unit: 'sklenice',
        isAlcoholic: true,
        status: 'confirmed',
        vendorName: 'Vinot√©ka U Hrozn≈Ø',
        notes: 'K ryb√°m',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'ƒåerven√© v√≠no - Frankovka',
        description: 'Polosuch√© ƒçerven√© v√≠no',
        category: 'wine',
        estimatedQuantity: 70,
        actualQuantity: null,
        pricePerUnit: 130,
        totalCost: 9100,
        currency: 'CZK',
        unit: 'sklenice',
        isAlcoholic: true,
        status: 'confirmed',
        vendorName: 'Vinot√©ka U Hrozn≈Ø',
        notes: 'K masu',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Pivo Pilsner Urquell',
        description: 'Le≈æ√°k 12¬∞',
        category: 'beer',
        estimatedQuantity: 120,
        actualQuantity: null,
        pricePerUnit: 50,
        totalCost: 6000,
        currency: 'CZK',
        unit: 'p≈Øllitr',
        isAlcoholic: true,
        status: 'confirmed',
        vendorName: 'N√°pojov√Ω servis',
        notes: 'ƒåepovan√©',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Miner√°ln√≠ voda',
        description: 'Perliv√° i neperliv√°',
        category: 'soft-drinks',
        estimatedQuantity: 200,
        actualQuantity: null,
        pricePerUnit: 25,
        totalCost: 5000,
        currency: 'CZK',
        unit: 'l√°hev',
        isAlcoholic: false,
        status: 'confirmed',
        vendorName: 'N√°pojov√Ω servis',
        notes: 'Na stoly',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'D≈æus pomeranƒçov√Ω',
        description: '100% pomeranƒçov√Ω d≈æus',
        category: 'soft-drinks',
        estimatedQuantity: 80,
        actualQuantity: null,
        pricePerUnit: 35,
        totalCost: 2800,
        currency: 'CZK',
        unit: 'sklenice',
        isAlcoholic: false,
        status: 'confirmed',
        vendorName: 'Catering Elegance',
        notes: 'Pro dƒõti',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      }
    ];

    const drinkBatch = db.batch();
    demoDrinkItems.forEach(item => {
      const itemRef = db.collection('drinkItems').doc();
      drinkBatch.set(itemRef, item);
    });
    await drinkBatch.commit();
    console.log('‚úÖ Demo drink items created');

    // Create demo budget items - realistic wedding budget
    console.log('üí∞ Creating demo budget items...');
    const demoBudgetItems = createDemoBudget(weddingRef.id, demoUser.uid);

    const budgetBatch = db.batch();
    demoBudgetItems.forEach((item) => {
      const budgetRef = db.collection('budgetItems').doc();
      budgetBatch.set(budgetRef, item);
    });
    await budgetBatch.commit();
    console.log(`‚úÖ Demo budget items created (${demoBudgetItems.length} items)`);

    // Create demo vendors
    console.log('üëî Creating demo vendors...');
    const demoVendors = [
      {
        weddingId: weddingRef.id,
        name: 'Photo Nejedl√≠',
        category: 'photographer',
        description: 'Profesion√°ln√≠ svatebn√≠ fotografie s d≈Ørazem na p≈ôirozen√© okam≈æiky',
        website: 'https://photonejedli.cz',
        contacts: [
          {
            name: 'Jan Nejedl√Ω',
            role: 'Hlavn√≠ fotograf',
            email: 'jan@photonejedli.cz',
            phone: '+420 777 123 456',
            isPrimary: true
          }
        ],
        address: {
          street: 'V√°clavsk√© n√°mƒõst√≠ 1',
          city: 'Praha',
          postalCode: '110 00',
          country: 'ƒåesk√° republika'
        },
        businessName: 'Photo Nejedl√≠ s.r.o.',
        businessId: '12345678',
        services: ['Report√°≈æn√≠ fotografie', 'Kreativn√≠ portr√©ty', 'Digit√°ln√≠ galerie'],
        priceRange: {
          min: 15000,
          max: 50000,
          currency: 'CZK'
        },
        status: 'booked',
        priority: 'high',
        rating: 5,
        lastContactDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        notes: 'Skvƒõl√© reference, profesion√°ln√≠ p≈ô√≠stup',
        tags: ['fotografie', 'report√°≈æ', 'profesion√°l'],
        portfolio: [
          'https://images.unsplash.com/photo-1606216794074-735e91aa2c92?w=800',
          'https://images.unsplash.com/photo-1511285560929-80b456fea0bc?w=800'
        ],
        testimonials: [],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        name: 'Catering Elegance',
        category: 'catering',
        description: 'Pr√©miov√Ω svatebn√≠ catering s d≈Ørazem na kvalitu a prezentaci',
        website: 'https://cateringelegance.cz',
        contacts: [
          {
            name: 'Marie Svobodov√°',
            role: 'Vedouc√≠ cateringu',
            email: 'marie@cateringelegance.cz',
            phone: '+420 777 234 567',
            isPrimary: true
          }
        ],
        address: {
          street: 'N√°dra≈æn√≠ 45',
          city: 'Praha',
          postalCode: '150 00',
          country: 'ƒåesk√° republika'
        },
        businessName: 'Catering Elegance s.r.o.',
        businessId: '87654321',
        services: ['Svatebn√≠ menu', 'Rauty', 'Dezerty', 'N√°poje'],
        priceRange: {
          min: 800,
          max: 2000,
          currency: 'CZK'
        },
        status: 'booked',
        priority: 'critical',
        rating: 5,
        lastContactDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        notes: 'Potvrzeno menu, z√°loha zaplacena',
        tags: ['catering', 'j√≠dlo', 'profesion√°l'],
        portfolio: [
          'https://images.unsplash.com/photo-1555244162-803834f70033?w=800',
          'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800'
        ],
        testimonials: [],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      }
    ];

    const vendorBatch = db.batch();
    demoVendors.forEach(vendor => {
      const vendorRef = db.collection('vendors').doc();
      vendorBatch.set(vendorRef, vendor);
    });
    await vendorBatch.commit();
    console.log('‚úÖ Demo vendors created');

    // Create demo music data
    console.log('üéµ Creating demo music data...');
    const demoMusicData = {
      weddingId: weddingRef.id,
      userId: demoUser.uid,
      vendor: {
        name: 'DJ Martin',
        contact: '+420 777 345 678',
        email: 'martin@djmartin.cz'
      },
      categories: [
        {
          id: 'groom-entrance',
          name: 'N√°stup ≈æenicha',
          description: 'Hudba p≈ôi p≈ô√≠chodu ≈æenicha k olt√°≈ôi',
          icon: 'ü§µ',
          required: true,
          songs: [
            {
              id: 'song-groom-1',
              title: 'Canon in D',
              artist: 'Johann Pachelbel',
              notes: 'Klasick√° volba'
            }
          ]
        },
        {
          id: 'bride-entrance',
          name: 'N√°stup nevƒõsty',
          description: 'Nejd≈Øle≈æitƒõj≈°√≠ okam≈æik - p≈ô√≠chod nevƒõsty',
          icon: 'üíç',
          required: true,
          songs: [
            {
              id: 'song-1',
              title: 'A Thousand Years',
              artist: 'Christina Perri',
              notes: 'Romantick√° klasika'
            }
          ]
        },
        {
          id: 'first-dance',
          name: 'Prvn√≠ tanec',
          description: 'V√°≈° prvn√≠ tanec jako man≈æel√©',
          icon: 'üíÉ',
          required: true,
          songs: [
            {
              id: 'song-2',
              title: 'Perfect',
              artist: 'Ed Sheeran',
              notes: 'Na≈°e obl√≠ben√° p√≠se≈à'
            }
          ]
        },
        {
          id: 'party-songs',
          name: 'P√°rty p√≠snƒõ',
          description: 'P√≠snƒõ na rozjet√≠ veƒç√≠rku',
          icon: 'üéµ',
          required: true,
          songs: [
            {
              id: 'song-party-1',
              title: 'Uptown Funk',
              artist: 'Mark Ronson ft. Bruno Mars',
              notes: 'Rozjede to!'
            },
            {
              id: 'song-party-2',
              title: 'I Gotta Feeling',
              artist: 'Black Eyed Peas',
              notes: 'Klasika'
            },
            {
              id: 'song-party-3',
              title: 'Happy',
              artist: 'Pharrell Williams',
              notes: 'Pozitivn√≠ n√°lada'
            }
          ]
        },
        {
          id: 'slow-songs',
          name: 'Pomal√© p√≠snƒõ',
          description: 'Romantick√© p√≠snƒõ pro pomal√© tance',
          icon: 'üíï',
          required: false,
          songs: [
            {
              id: 'song-slow-1',
              title: 'Thinking Out Loud',
              artist: 'Ed Sheeran',
              notes: 'Romantick√°'
            },
            {
              id: 'song-slow-2',
              title: 'All of Me',
              artist: 'John Legend',
              notes: 'Kr√°sn√Ω text'
            }
          ]
        }
      ],
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };

    await db.collection('music').add(demoMusicData);
    console.log('‚úÖ Demo music data created');

    // Create demo notes
    console.log('üìù Creating demo notes...');
    const demoNotes = [
      {
        weddingId: weddingRef.id,
        title: 'D≈Øle≈æit√© kontakty',
        content: 'Fotograf: Jan Nejedl√Ω (+420 777 123 456)\nCatering: Marie Svobodov√° (+420 777 234 567)\nM√≠sto kon√°n√≠: Ch√¢teau Mcely (+420 325 600 000)',
        category: 'contacts',
        isPinned: true,
        tags: ['kontakty', 'd≈Øle≈æit√©'],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        title: 'N√°pady na dekorace',
        content: 'B√≠l√© r≈Ø≈æe s eukalyptem\nSv√≠ƒçky na stolech\nRustik√°ln√≠ d≈ôevƒõn√© prvky\nZlat√° barva jako akcent',
        category: 'ideas',
        isPinned: false,
        tags: ['dekorace', 'n√°pady'],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      }
    ];

    const notesBatch = db.batch();
    demoNotes.forEach(note => {
      const noteRef = db.collection('notes').doc();
      notesBatch.set(noteRef, note);
    });
    await notesBatch.commit();
    console.log('‚úÖ Demo notes created');

    // Create demo timeline milestones
    console.log('üìÖ Creating demo timeline milestones...');
    const demoMilestones = [
      {
        weddingId: weddingRef.id,
        title: 'Rezervace m√≠sta kon√°n√≠',
        description: 'Rezervovat a potvrdit m√≠sto kon√°n√≠ svatby',
        type: 'venue-booking',
        targetDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        completedDate: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000),
        period: '6-months',
        status: 'completed',
        progress: 100,
        dependsOn: [],
        blockedBy: [],
        taskIds: [],
        budgetItemIds: [],
        guestIds: [],
        vendorIds: [],
        priority: 'critical',
        isRequired: true,
        reminderDays: [30, 14, 7],
        notificationsSent: [],
        notes: 'Ch√¢teau Mcely rezervov√°no a potvrzeno',
        attachments: [],
        tags: ['m√≠sto', 'rezervace'],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        title: 'V√Ωbƒõr svatebn√≠ch ≈°at≈Ø',
        description: 'Naj√≠t a objednat svatebn√≠ ≈°aty vƒçetnƒõ √∫prav',
        type: 'attire',
        targetDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        period: '3-months',
        status: 'in-progress',
        progress: 50,
        dependsOn: [],
        blockedBy: [],
        taskIds: [],
        budgetItemIds: [],
        guestIds: [],
        vendorIds: [],
        priority: 'high',
        isRequired: true,
        reminderDays: [14, 7, 3],
        notificationsSent: [],
        notes: 'Objedn√°no, ƒçek√° se na √∫pravy',
        attachments: [],
        tags: ['≈°aty', 'obleƒçen√≠'],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      }
    ];

    const milestoneBatch = db.batch();
    demoMilestones.forEach(milestone => {
      const milestoneRef = db.collection('milestones').doc();
      milestoneBatch.set(milestoneRef, milestone);
    });
    await milestoneBatch.commit();
    console.log('‚úÖ Demo timeline milestones created');

    // Create demo AI timeline items
    console.log('‚è∞ Creating demo AI timeline items...');
    const demoAITimelineItems = [
      {
        weddingId: weddingRef.id,
        time: '09:00',
        activity: 'P≈ô√≠prava nevƒõsty - l√≠ƒçen√≠ a √∫ƒçes',
        duration: '3 hodiny',
        location: 'Hotel Ch√¢teau Mcely',
        participants: ['Nevƒõsta', 'Kade≈ônice', 'Viz√°≈æistka'],
        category: 'preparation',
        order: 0,
        isCompleted: false,
        notes: 'Zaƒç√≠t vƒças, rezervovat dostatek ƒçasu',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        time: '14:00',
        activity: 'Svatebn√≠ ob≈ôad',
        duration: '45 minut',
        location: 'Ch√¢teau Mcely - zahrada',
        participants: ['Nevƒõsta', '≈Ωenich', 'Odd√°vaj√≠c√≠', 'Host√©'],
        category: 'ceremony',
        order: 1,
        isCompleted: false,
        notes: 'Hlavn√≠ ƒç√°st svatby',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        time: '15:00',
        activity: 'Gratulace a focen√≠',
        duration: '1 hodina',
        location: 'Ch√¢teau Mcely - zahrada',
        participants: ['Nevƒõsta', '≈Ωenich', 'Fotograf', 'Host√©'],
        category: 'photography',
        order: 2,
        isCompleted: false,
        notes: 'Skupinov√© fotky s hosty',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        time: '18:00',
        activity: 'Svatebn√≠ hostina',
        duration: '3 hodiny',
        location: 'Ch√¢teau Mcely - s√°l',
        participants: ['V≈°ichni host√©'],
        category: 'reception',
        order: 3,
        isCompleted: false,
        notes: 'Veƒçe≈ôe a p≈ô√≠pitek',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      },
      {
        weddingId: weddingRef.id,
        time: '21:00',
        activity: 'Prvn√≠ tanec a z√°bava',
        duration: '4 hodiny',
        location: 'Ch√¢teau Mcely - taneƒçn√≠ parket',
        participants: ['V≈°ichni host√©', 'DJ'],
        category: 'party',
        order: 4,
        isCompleted: false,
        notes: 'Tanec a oslava',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdBy: demoUser.uid
      }
    ];

    const aiTimelineBatch = db.batch();
    demoAITimelineItems.forEach(item => {
      const itemRef = db.collection('aiTimelineItems').doc();
      aiTimelineBatch.set(itemRef, item);
    });
    await aiTimelineBatch.commit();
    console.log('‚úÖ Demo AI timeline items created');

    console.log('\nüéâ Demo account setup complete!');
    console.log('üìß Email: demo@svatbot.cz');
    console.log('üîë Password: demo123');
    console.log('üë§ User ID:', demoUser.uid);
    console.log('üíí Wedding ID:', weddingRef.id);

  } catch (error) {
    console.error('‚ùå Error creating demo account:', error);
    process.exit(1);
  }
}

// Run the script
createDemoAccount()
  .then(() => {
    console.log('‚úÖ Script completed successfully');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script failed:', error);
    process.exit(1);
  });
