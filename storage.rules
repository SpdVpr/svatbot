rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // User profile photos
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId) &&
                      request.resource.size < 5 * 1024 * 1024 && // 5MB limit
                      request.resource.contentType.matches('image/.*');
    }

    // Wedding photos and documents (including accommodation room photos)
    match /weddings/{weddingId}/{allPaths=**} {
      allow read: if isAuthenticated() &&
                     firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                     firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
      allow write: if isAuthenticated() &&
                      firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                      firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid &&
                      request.resource.size < 10 * 1024 * 1024 && // 10MB limit
                      request.resource.contentType.matches('image/.*');
      allow delete: if isAuthenticated() &&
                       firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                       firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
    }

    // Moodboard images (including thumbnails subfolder)
    match /moodboards/{weddingId}/{allPaths=**} {
      allow read: if isAuthenticated() &&
                     firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                     firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
      allow write: if isAuthenticated() &&
                      firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                      firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid &&
                      request.resource.size < 10 * 1024 * 1024 && // 10MB limit
                      request.resource.contentType.matches('image/.*');
      allow delete: if isAuthenticated() &&
                       firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                       firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
    }

    // Helper function for admin check
    function isAdmin() {
      return isAuthenticated() &&
             request.auth.token.role in ['admin', 'super_admin'];
    }

    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Vendor images (marketplace)
    match /svatbot/{userId}/{fileName} {
      allow read: if true; // Public read
      // Allow write for authenticated users (owner) or anonymous vendor registration
      allow write: if (isAuthenticated() && isOwner(userId) && isValidImageFile()) ||
                      (userId == 'anonymous' && isValidImageFile());
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Portfolio images
    match /portfolio/{userId}/{fileName} {
      allow read: if true; // Public read
      // Allow write for authenticated users (owner) or anonymous vendor registration
      allow write: if (isAuthenticated() && isOwner(userId) && isValidImageFile()) ||
                      (userId == 'anonymous' && isValidImageFile());
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Vendor profile images
    match /vendors/{vendorId}/images/{fileName} {
      allow read: if true; // Public read
      allow write: if isAuthenticated() && isValidImageFile();
      allow delete: if isAdmin();
    }

    // Admin uploads
    match /admin/{fileName} {
      allow read: if true; // Public read
      allow write: if isAdmin() && isValidImageFile();
      allow delete: if isAdmin();
    }

    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && isOwner(userId) &&
                            request.resource.size < 20 * 1024 * 1024; // 20MB limit
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Wedding website images
    match /wedding-websites/{weddingId}/{allPaths=**} {
      allow read: if true; // Public read for published websites
      allow write: if isAuthenticated() &&
                      firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                      firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid &&
                      request.resource.size < 10 * 1024 * 1024 && // 10MB limit
                      request.resource.contentType.matches('image/.*');
      allow delete: if isAuthenticated() &&
                       firestore.exists(/databases/(default)/documents/weddings/$(weddingId)) &&
                       firestore.get(/databases/(default)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
    }

    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
