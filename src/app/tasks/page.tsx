'use client'

import { useState } from 'react'
import { useAuth } from '@/hooks/useAuth'
import { useWedding } from '@/hooks/useWedding'
import { useTask } from '@/hooks/useTask'
import TaskList from '@/components/tasks/TaskList'
import TaskStats from '@/components/tasks/TaskStats'
import TaskForm from '@/components/tasks/TaskForm'
import TaskDebug from '@/components/debug/TaskDebug'
import ModuleHeader from '@/components/common/ModuleHeader'
import Link from 'next/link'
import logger from '@/lib/logger'
import { TaskFormData, Task } from '@/types/task'
import {
  Plus,
  Download,
  CheckSquare,
  List,
  Home,
  BarChart3,
  Filter
} from 'lucide-react'

export default function TasksPage() {
  const { user } = useAuth()
  const { wedding } = useWedding()
  const {
    initializeTasksFromTemplates,
    tasks,
    loading,
    createTask,
    updateTask,
    error,
    stats,
    toggleTaskStatus,
    deleteTask,
    clearError
  } = useTask()
  // Removed viewMode - using stats view as default (most informative)
  const [showInitializeModal, setShowInitializeModal] = useState(false)
  const [showTaskForm, setShowTaskForm] = useState(false)
  const [taskFormLoading, setTaskFormLoading] = useState(false)
  const [editingTask, setEditingTask] = useState<Task | null>(null)

  // Check if user has any tasks
  const hasTasks = tasks.length > 0

  // Check if this is a demo user
  const isDemoUser = user?.email === 'demo@svatbot.cz' || wedding?.id === 'demo-wedding'

  // Debug logging for tasks state
  logger.log('üîç TasksPage render - user:', user?.id, user?.email)
  logger.log('üîç TasksPage render - wedding:', wedding?.id)
  logger.log('üîç TasksPage render - isDemoUser:', isDemoUser)
  logger.log('üîç TasksPage render - tasks count:', tasks.length)
  logger.log('üîç TasksPage render - tasks:', tasks.map(t => ({ id: t.id, title: t.title })))

  // Handle initialize tasks from templates
  const handleInitializeTasks = async () => {
    try {
      await initializeTasksFromTemplates()
      setShowInitializeModal(false)
    } catch (error) {
      logger.error('Error initializing tasks:', error)
    }
  }

  // Handle create task
  const handleCreateTask = async (data: TaskFormData) => {
    try {
      logger.log('üöÄ Starting task creation:', data.title)
      logger.log('üöÄ Current tasks before creation:', tasks.length)
      setTaskFormLoading(true)
      const newTask = await createTask(data)
      logger.log('‚úÖ Task created successfully:', newTask.title)
      logger.log('‚úÖ Tasks count after creation should be:', tasks.length + 1)
      setShowTaskForm(false)
      setEditingTask(null)
    } catch (error) {
      logger.error('Error creating task:', error)
      throw error // Re-throw to show error in form
    } finally {
      setTaskFormLoading(false)
    }
  }

  // Handle edit task
  const handleEditTask = async (data: TaskFormData) => {
    if (!editingTask) return

    try {
      logger.log('üöÄ Starting task update:', data.title)
      setTaskFormLoading(true)
      await updateTask(editingTask.id, {
        title: data.title,
        description: data.description,
        category: data.category,
        priority: data.priority,
        dueDate: data.dueDate,
        assignedTo: data.assignedTo,
        notes: data.notes
      })
      logger.log('‚úÖ Task updated successfully')
      setShowTaskForm(false)
      setEditingTask(null)
    } catch (error) {
      logger.error('Error updating task:', error)
      throw error
    } finally {
      setTaskFormLoading(false)
    }
  }

  // Handle open edit modal
  const handleOpenEditModal = (task: Task) => {
    setEditingTask(task)
    setShowTaskForm(true)
  }

  // Don't show auth check - let AppTemplate handle transitions smoothly
  if (!user || !wedding) {
    return null
  }

  return (
    <div className="min-h-screen">
      {/* Header */}
      <ModuleHeader
        icon={CheckSquare}
        title="√ökoly"
        subtitle={`${stats.total} √∫kol≈Ø ‚Ä¢ ${stats.completed} dokonƒçeno`}
        iconGradient="from-blue-500 to-indigo-500"
        actions={
          <button
            onClick={() => setShowTaskForm(true)}
            className="btn-primary flex items-center space-x-2"
          >
            <Plus className="w-4 h-4" />
            <span>Nov√Ω √∫kol</span>
          </button>
        }
      />

      {/* Main content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 loading-spinner" />
              <span className="text-text-muted">Naƒç√≠t√°n√≠ √∫kol≈Ø...</span>
            </div>
          </div>
        ) : !hasTasks ? (
          /* Empty state */
          <div className="text-center py-12">
            <div className="w-24 h-24 mx-auto mb-6 bg-primary-100 rounded-full flex items-center justify-center">
              <List className="w-12 h-12 text-primary-600" />
            </div>
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Zaƒçnƒõte s pl√°nov√°n√≠m √∫kol≈Ø
            </h2>
            <p className="text-text-muted mb-8 max-w-md mx-auto">
              Vytvo≈ôte si √∫koly pro pl√°nov√°n√≠ svatby nebo pou≈æijte na≈°e p≈ôedp≈ôipraven√© ≈°ablony
              podle f√°z√≠ svatebn√≠ho pl√°nov√°n√≠.
            </p>

            <div className="flex flex-col sm:flex-row items-center justify-center space-y-3 sm:space-y-0 sm:space-x-4">
              <button
                onClick={() => setShowInitializeModal(true)}
                className="btn-primary flex items-center space-x-2"
              >
                <Download className="w-4 h-4" />
                <span>Pou≈æ√≠t ≈°ablony √∫kol≈Ø</span>
              </button>

              <button
                onClick={() => setShowTaskForm(true)}
                className="btn-outline flex items-center space-x-2"
              >
                <Plus className="w-4 h-4" />
                <span>Vytvo≈ôit vlastn√≠ √∫kol</span>
              </button>
            </div>

            {/* Quick navigation */}
            <div className="mt-8 text-center">
              <Link
                href="/"
                className="inline-flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <Home className="w-4 h-4" />
                <span>Zpƒõt na hlavn√≠ obrazovku</span>
              </Link>
            </div>

            {/* Features preview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-12 max-w-4xl mx-auto">
              <div className="text-center">
                <div className="w-12 h-12 mx-auto mb-3 bg-blue-100 rounded-full flex items-center justify-center">
                  <List className="w-6 h-6 text-blue-600" />
                </div>
                <h3 className="font-medium text-gray-900 mb-2">Organizovan√© √∫koly</h3>
                <p className="text-sm text-text-muted">
                  √ökoly rozdƒõlen√© podle f√°z√≠ svatebn√≠ho pl√°nov√°n√≠
                </p>
              </div>

              <div className="text-center">
                <div className="w-12 h-12 mx-auto mb-3 bg-green-100 rounded-full flex items-center justify-center">
                  <BarChart3 className="w-6 h-6 text-green-600" />
                </div>
                <h3 className="font-medium text-gray-900 mb-2">Sledov√°n√≠ pokroku</h3>
                <p className="text-sm text-text-muted">
                  P≈ôehled o tom, co je hotov√© a co zb√Ωv√° udƒõlat
                </p>
              </div>

              <div className="text-center">
                <div className="w-12 h-12 mx-auto mb-3 bg-purple-100 rounded-full flex items-center justify-center">
                  <Filter className="w-6 h-6 text-purple-600" />
                </div>
                <h3 className="font-medium text-gray-900 mb-2">Chytr√© filtry</h3>
                <p className="text-sm text-text-muted">
                  Filtrov√°n√≠ podle priority, term√≠nu nebo kategorie
                </p>
              </div>
            </div>
          </div>
        ) : (
          /* Stats view - most informative display */
          <div className="space-y-6">
            <TaskStats
              onCreateTask={() => {
                setEditingTask(null)
                setShowTaskForm(true)
              }}
              onEditTask={handleOpenEditModal}
              tasks={isDemoUser ? tasks : undefined}
              stats={isDemoUser ? stats : undefined}
              loading={isDemoUser ? loading : undefined}
              error={isDemoUser ? error : undefined}
              toggleTaskStatus={isDemoUser ? toggleTaskStatus : undefined}
              deleteTask={isDemoUser ? deleteTask : undefined}
              clearError={isDemoUser ? clearError : undefined}
            />
          </div>
        )}
      </div>

      {/* Initialize tasks modal */}
      {showInitializeModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Inicializovat √∫koly ze ≈°ablon
            </h3>
            <p className="text-text-muted mb-6">
              Vytvo≈ô√≠me v√°m p≈ôedp≈ôipraven√© √∫koly podle f√°z√≠ svatebn√≠ho pl√°nov√°n√≠.
              Term√≠ny budou automaticky vypoƒç√≠t√°ny podle data va≈°√≠ svatby.
            </p>

            <div className="bg-blue-50 p-4 rounded-lg mb-6">
              <h4 className="font-medium text-blue-900 mb-2">Co se vytvo≈ô√≠:</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ Z√°kladn√≠ √∫koly (datum, rozpoƒçet, host√©)</li>
                <li>‚Ä¢ Rezervace m√≠st (ob≈ôad, hostina)</li>
                <li>‚Ä¢ Organizace host≈Ø (ozn√°men√≠, RSVP)</li>
                <li>‚Ä¢ Dodavatel√© (fotograf, hudba, catering)</li>
                <li>‚Ä¢ Fin√°ln√≠ p≈ô√≠pravy</li>
              </ul>
            </div>

            <div className="flex space-x-3">
              <button
                onClick={() => setShowInitializeModal(false)}
                className="flex-1 btn-outline"
              >
                Zru≈°it
              </button>
              <button
                onClick={handleInitializeTasks}
                className="flex-1 btn-primary"
              >
                Vytvo≈ôit √∫koly
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Task Form Modal */}
      {showTaskForm && (
        <TaskForm
          onSubmit={editingTask ? handleEditTask : handleCreateTask}
          onCancel={() => {
            setShowTaskForm(false)
            setEditingTask(null)
          }}
          loading={taskFormLoading}
          error={error || undefined}
          initialData={editingTask ? {
            title: editingTask.title,
            description: editingTask.description || '',
            category: editingTask.category,
            priority: editingTask.priority,
            dueDate: editingTask.dueDate,
            assignedTo: editingTask.assignedTo,
            notes: editingTask.notes
          } : undefined}
        />
      )}

      {/* Debug component for development */}
      <TaskDebug />
    </div>
  )
}
