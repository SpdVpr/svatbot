import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

// Initialize OpenAI
const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
}) : null

export async function POST(request: NextRequest) {
  try {
    if (!openai) {
      return NextResponse.json(
        { error: 'OpenAI API nen√≠ nakonfigurov√°no' },
        { status: 500 }
      )
    }

    const { imageUrls, weddingContext, userPrompt } = await request.json()

    if (!imageUrls || !Array.isArray(imageUrls) || imageUrls.length === 0) {
      return NextResponse.json(
        { error: 'Mus√≠te poskytnout alespo≈à jeden obr√°zek' },
        { status: 400 }
      )
    }

    if (imageUrls.length > 10) {
      return NextResponse.json(
        { error: 'Maxim√°ln√≠ poƒçet obr√°zk≈Ø je 10' },
        { status: 400 }
      )
    }

    // Build context string
    const contextString = weddingContext ? `
Kontext svatby:
- Datum: ${weddingContext.weddingDate ? new Date(weddingContext.weddingDate).toLocaleDateString('cs-CZ') : 'neurƒçeno'}
- Lokace: ${weddingContext.location || 'neurƒçena'}
- Styl: ${weddingContext.style || 'neurƒçen'}
- Barvy: ${weddingContext.colors?.join(', ') || 'neurƒçeny'}
- Poƒçet host≈Ø: ${weddingContext.guestCount || 'neurƒçen'}
` : ''

    // Add user prompt if provided
    const userPromptString = userPrompt ? `

D≈ÆLE≈ΩIT√â - U≈æivatelsk√© instrukce:
"${userPrompt}"

Vezmi tyto instrukce v √∫vahu p≈ôi anal√Ωze a vytv√°≈ôen√≠ promptu. Zamƒõ≈ô se na prvky, kter√© u≈æivatel zm√≠nil.
` : ''

    // Prepare messages for GPT-4o-mini with vision
    const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
      {
        role: 'system',
        content: `Jsi expert na svatebn√≠ design a vizu√°ln√≠ styl. Analyzuje≈° svatebn√≠ inspiraƒçn√≠ fotografie a vytv√°≈ô√≠≈° detailn√≠ popisy pro generov√°n√≠ AI moodboard≈Ø.

Tv√Ωm √∫kolem je:
1. Analyzovat v≈°echny poskytnut√© obr√°zky
2. Identifikovat spoleƒçn√© prvky (barvy, styl, atmosf√©ru, materi√°ly, dekorace)
3. Vytvo≈ôit detailn√≠ prompt pro generov√°n√≠ vizu√°ln√≠ kol√°≈æe (v angliƒçtinƒõ)
4. Poskytnout strukturovanou anal√Ωzu (V ƒåE≈†TINƒö!)

D≈ÆLE≈ΩIT√â: V≈°echny hodnoty kromƒõ "prompt" mus√≠ b√Ωt V≈ΩDY V ƒåE≈†TINƒö, ne v angliƒçtinƒõ!

Odpov√≠dej POUZE ve form√°tu JSON bez jak√©hokoliv dal≈°√≠ho textu.`
      },
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: `${contextString}${userPromptString}

Analyzuj tyto svatebn√≠ inspiraƒçn√≠ fotografie a vytvo≈ô:
1. Detailn√≠ prompt pro generov√°n√≠ svatebn√≠ho moodboardu (v angliƒçtinƒõ, optimalizovan√Ω pro AI generov√°n√≠)
2. Anal√Ωzu stylu, barev a atmosf√©ry (V≈ΩDY V ƒåE≈†TINƒö!)

D≈ÆLE≈ΩIT√â: V≈°echny hodnoty kromƒõ "prompt" mus√≠ b√Ωt V ƒåE≈†TINƒö!

Odpovƒõz ve form√°tu JSON:
{
  "prompt": "detailn√≠ anglick√Ω prompt pro AI generov√°n√≠ kol√°≈æe",
  "style": "rustik√°ln√≠",
  "colors": ["b√≠l√°", "zelen√°", "r≈Ø≈æov√°"],
  "mood": "romantick√° a p≈ô√≠rodn√≠ atmosf√©ra",
  "elements": ["kvƒõtiny", "d≈ôevo", "krajka"],
  "materials": ["d≈ôevo", "len", "bavlna"],
  "summary": "Rustik√°ln√≠ svatba s p≈ô√≠rodn√≠mi prvky a romantickou atmosf√©rou"
}`
          },
          // Add all images
          ...imageUrls.map((url: string) => ({
            type: 'image_url' as const,
            image_url: {
              url: url,
              detail: 'high' as const
            }
          }))
        ]
      }
    ]

    console.log('üîç Analyzing images with GPT-4o-mini Vision...')

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages,
      max_tokens: 1500,
      temperature: 0.7,
    })

    const content = response.choices[0]?.message?.content

    if (!content) {
      throw new Error('Nepoda≈ôilo se z√≠skat odpovƒõƒè od AI')
    }

    // Parse JSON response
    let analysis
    try {
      // Remove markdown code blocks if present
      let cleanContent = content.trim()
      if (cleanContent.startsWith('```json')) {
        cleanContent = cleanContent.replace(/```json\s*/, '').replace(/```\s*$/, '')
      } else if (cleanContent.startsWith('```')) {
        cleanContent = cleanContent.replace(/```\s*/, '').replace(/```\s*$/, '')
      }
      
      analysis = JSON.parse(cleanContent)
    } catch (parseError) {
      console.error('Failed to parse AI response:', content)
      throw new Error('Nepoda≈ôilo se zpracovat odpovƒõƒè od AI')
    }

    // Validate response structure
    if (!analysis.prompt || !analysis.style || !analysis.colors) {
      throw new Error('Neplatn√° struktura odpovƒõdi od AI')
    }

    console.log('‚úÖ Analysis complete:', {
      style: analysis.style,
      colors: analysis.colors,
      elementsCount: analysis.elements?.length || 0
    })

    return NextResponse.json({
      success: true,
      analysis: {
        prompt: analysis.prompt,
        style: analysis.style,
        colors: analysis.colors || [],
        mood: analysis.mood || '',
        elements: analysis.elements || [],
        materials: analysis.materials || [],
        summary: analysis.summary || ''
      }
    })

  } catch (error) {
    console.error('‚ùå Moodboard analysis error:', error)
    
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Nepoda≈ôilo se analyzovat obr√°zky',
        details: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    )
  }
}

