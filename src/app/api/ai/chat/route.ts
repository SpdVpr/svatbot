import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

// Initialize OpenAI only if API key is available
const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
}) : null

// Svatbot - AI Wedding Coach Personality
const SVATBOT_SYSTEM_PROMPT = `
Jsi Svatbot - AI svatebn√≠ kouƒç a emocion√°ln√≠ asistent pro p√°ry pl√°nuj√≠c√≠ svatbu v ƒåesk√© republice.

ü§ñ TVOJE OSOBNOST:
- Jm√©no: Svatbot
- Role: Osobn√≠ svatebn√≠ kouƒç a emocion√°ln√≠ podpora
- T√≥n: Empatick√Ω, povzbuzuj√≠c√≠, p≈ô√°telsk√Ω ale profesion√°ln√≠
- Styl: Pou≈æ√≠v√°≈° emotikony üíïüéâ‚ú® (ale ne p≈ôehnanƒõ), gratuluje≈° k √∫spƒõch≈Øm, povzbuzuje≈° p≈ôi stresu

üí° TVOJE SCHOPNOSTI:
1. **Praktick√© rady**: Zn√°≈° ƒçesk√© svatebn√≠ tradice, ceny, dodavatele, pr√°vn√≠ po≈æadavky
2. **Emocion√°ln√≠ podpora**: Rozpozn√°v√°≈° stres, poskytuj uklidnƒõn√≠, motivaci
3. **Proaktivn√≠ asistence**: Nab√≠z√≠≈° tipy, p≈ôipom√≠n√°≈° miln√≠ky, gratuluje≈° k pokroku
4. **Vztahov√° podpora**: P≈ôipom√≠n√°≈° d≈Øle≈æitost ƒçasu s partnerem, work-life balance

üìä ZNALOSTI:
- ƒåesk√© svatebn√≠ tradice a zvyky
- Pr≈Ømƒõrn√© ceny slu≈æeb v ƒåR (2024-2025)
- Sez√≥nn√≠ faktory (kvƒõten-z√°≈ô√≠ hlavn√≠ sez√≥na)
- Region√°ln√≠ rozd√≠ly (Praha dra≈æ≈°√≠ ne≈æ venkov)
- Pr√°vn√≠ po≈æadavky (matrika, c√≠rkevn√≠ ob≈ôad)
- ƒåasov√© pl√°nov√°n√≠ (12-18 mƒõs√≠c≈Ø dop≈ôedu)
- Stress management pro svatebn√≠ p≈ô√≠pravu

üéØ JAK ODPOV√çD√Å≈†:
1. V≈ædy v ƒçe≈°tinƒõ
2. S empati√≠ a pochopen√≠m
3. Prakticky s konkr√©tn√≠mi ƒç√≠sly a tipy
4. Povzbuzuj a gratuluj k pokroku
5. Rozpozn√°vej stres v ot√°zk√°ch a nab√≠dni uklidnƒõn√≠
6. P≈ôipom√≠nej, ≈æe svatba m√° b√Ωt radost, ne stres
7. Pou≈æ√≠vej emotikony pro p≈ô√°telsk√Ω t√≥n (ale ne p≈ôehnanƒõ)

üö® DETEKCE STRESU:
Pokud u≈æivatel zn√≠:
- P≈ôet√≠≈æen√Ω ‚Üí Nab√≠dni zjednodu≈°en√≠, delegov√°n√≠
- Stresovan√Ω ‚Üí Uklidni, p≈ôipome≈à ≈æe je to norm√°ln√≠
- Unaven√Ω ‚Üí Doporuƒç pauzu, date night s partnerem
- Zmaten√Ω ‚Üí Rozdƒõl probl√©m na men≈°√≠ kroky

üíï EMOCION√ÅLN√ç PODPORA:
- Gratuluj k dokonƒçen√Ωm √∫kol≈Øm
- Oslavuj miln√≠ky (50% pokrok, 100 dn√≠ do svatby, atd.)
- P≈ôipom√≠nej d≈Øle≈æitost vztahu bƒõhem p≈ô√≠prav
- Nab√≠zej relaxaƒçn√≠ tipy p≈ôi stresu
- Povzbuzuj p≈ôi p≈ôek√°≈æk√°ch

üìä P≈ò√çSTUP K RE√ÅLN√ùM DAT≈ÆM:
M√°≈° p≈ô√≠stup k RE√ÅLN√ùM dat≈Øm u≈æivatele o jeho svatbƒõ vƒçetnƒõ:
- üë• Host√© (jm√©na, dietn√≠ omezen√≠, RSVP status, ubytov√°n√≠)
- üí∞ Rozpoƒçet (polo≈æky, ƒç√°stky, dodavatel√©, platby)
- ‚úÖ √ökoly (n√°zvy, term√≠ny, statusy, priority)
- ü™ë Seating plan (stoly, kapacity, p≈ôi≈ôazen√≠ host≈Ø)
- üåê Svatebn√≠ web (URL, publikace, RSVP, n√°v≈°tƒõvnost)
- üè® Ubytov√°n√≠ (hotely, pokoje, obsazenost)
- üõí N√°kupn√≠ seznam (polo≈æky, ceny, status n√°kupu)
- üìÖ Kalend√°≈ô ud√°lost√≠ (v≈°echny ud√°losti, sch≈Øzky, term√≠ny)

Kdy≈æ se u≈æivatel pt√° na konkr√©tn√≠ informace, V≈ΩDY odpov√≠dej na z√°kladƒõ poskytnut√Ωch dat!
Buƒè konkr√©tn√≠ - uv√°dƒõj jm√©na, ƒç√≠sla, term√≠ny z re√°ln√Ωch dat!

Odpov√≠dej v≈ædy jako Svatbot - tv≈Øj osobn√≠ svatebn√≠ kouƒç! ü§ñüíï
`

// Helper function to build detailed context string
function buildDetailedContext(context: any): string {
  if (!context) return ''

  let contextStr = '\n=== DETAILN√ç KONTEXT SVATBY ===\n\n'

  // Basic info
  contextStr += 'üìã Z√ÅKLADN√ç INFORMACE:\n'
  contextStr += `- Datum svatby: ${context.weddingDate ? new Date(context.weddingDate).toLocaleDateString('cs-CZ') : 'neurƒçeno'}\n`
  contextStr += `- Lokace: ${context.location || 'neurƒçena'}\n`
  contextStr += `- Styl: ${context.style || 'neurƒçen'}\n`
  contextStr += `- Celkov√Ω rozpoƒçet: ${context.budget ? `${context.budget.toLocaleString()} Kƒç` : 'neurƒçen'}\n`
  contextStr += `- Poƒçet host≈Ø: ${context.guestCount || 'neurƒçen'}\n\n`

  // Guest stats and details
  if (context.guestStats) {
    contextStr += 'üë• STATISTIKY HOST≈Æ:\n'
    contextStr += `- Celkem host≈Ø: ${context.guestStats.total}\n`
    contextStr += `- Potvrzeno: ${context.guestStats.confirmed}\n`
    contextStr += `- Odm√≠tnuto: ${context.guestStats.declined}\n`
    contextStr += `- ƒåek√° na odpovƒõƒè: ${context.guestStats.pending}\n`
    contextStr += `- S dietn√≠mi omezen√≠mi: ${context.guestStats.withDietaryRestrictions}\n`
    contextStr += `- Pot≈ôebuje ubytov√°n√≠: ${context.guestStats.needingAccommodation}\n\n`
  }

  // Detailed guest info with dietary restrictions
  if (context.guests && context.guests.length > 0) {
    const guestsWithDietary = context.guests.filter((g: any) =>
      g.dietaryRestrictions && g.dietaryRestrictions.length > 0
    )

    if (guestsWithDietary.length > 0) {
      contextStr += 'üçΩÔ∏è HOST√â S DIETN√çMI OMEZEN√çMI:\n'
      guestsWithDietary.forEach((guest: any) => {
        contextStr += `- ${guest.firstName} ${guest.lastName}: ${guest.dietaryRestrictions.join(', ')}`
        if (guest.dietaryNotes) {
          contextStr += ` (${guest.dietaryNotes})`
        }
        contextStr += '\n'
      })
      contextStr += '\n'
    }

    const guestsNeedingAccommodation = context.guests.filter((g: any) => g.accommodationNeeded)
    if (guestsNeedingAccommodation.length > 0) {
      contextStr += 'üè® HOST√â POT≈òEBUJ√çC√ç UBYTOV√ÅN√ç:\n'
      guestsNeedingAccommodation.forEach((guest: any) => {
        contextStr += `- ${guest.firstName} ${guest.lastName}\n`
      })
      contextStr += '\n'
    }
  }

  // Budget details
  if (context.budgetStats) {
    contextStr += 'üí∞ ROZPOƒåET:\n'
    contextStr += `- Celkov√Ω rozpoƒçet: ${context.budgetStats.totalBudget.toLocaleString()} Kƒç\n`
    contextStr += `- Celkem utraceno: ${context.budgetStats.totalSpent.toLocaleString()} Kƒç\n`
    contextStr += `- Zaplaceno: ${context.budgetStats.totalPaid.toLocaleString()} Kƒç\n`
    contextStr += `- Zb√Ωv√°: ${context.budgetStats.remaining.toLocaleString()} Kƒç\n`
    contextStr += `- Procento utraceno: ${context.budgetStats.budgetUsed}%\n\n`
  }

  // Budget items
  if (context.budgetItems && context.budgetItems.length > 0) {
    contextStr += 'üìä ROZPOƒåTOV√â POLO≈ΩKY:\n'
    context.budgetItems.forEach((item: any) => {
      contextStr += `- ${item.name} (${item.category}): `
      contextStr += `Pl√°nov√°no ${item.budgetedAmount?.toLocaleString() || 0} Kƒç, `
      contextStr += `Skuteƒçnost ${item.actualAmount?.toLocaleString() || 0} Kƒç, `
      contextStr += `Zaplaceno ${item.paidAmount?.toLocaleString() || 0} Kƒç`
      if (item.vendorName) {
        contextStr += ` - Dodavatel: ${item.vendorName}`
      }
      contextStr += '\n'
    })
    contextStr += '\n'
  }

  // Task stats
  if (context.taskStats) {
    contextStr += '‚úÖ √öKOLY:\n'
    contextStr += `- Celkem √∫kol≈Ø: ${context.taskStats.total}\n`
    contextStr += `- Dokonƒçeno: ${context.taskStats.completed}\n`
    contextStr += `- ƒåek√°: ${context.taskStats.pending}\n`
    contextStr += `- Po term√≠nu: ${context.taskStats.overdue}\n\n`
  }

  // Task details
  if (context.currentTasks && context.currentTasks.length > 0) {
    const pendingTasks = context.currentTasks.filter((t: any) => t.status === 'pending')
    const overdueTasks = context.currentTasks.filter((t: any) => {
      if (!t.dueDate || t.status === 'completed') return false
      return new Date(t.dueDate) < new Date()
    })

    if (overdueTasks.length > 0) {
      contextStr += '‚ö†Ô∏è √öKOLY PO TERM√çNU:\n'
      overdueTasks.forEach((task: any) => {
        contextStr += `- ${task.title} (term√≠n: ${new Date(task.dueDate).toLocaleDateString('cs-CZ')})\n`
      })
      contextStr += '\n'
    }

    if (pendingTasks.length > 0) {
      contextStr += 'üìù ƒåEKAJ√çC√ç √öKOLY:\n'
      pendingTasks.slice(0, 10).forEach((task: any) => {
        contextStr += `- ${task.title}`
        if (task.dueDate) {
          contextStr += ` (term√≠n: ${new Date(task.dueDate).toLocaleDateString('cs-CZ')})`
        }
        contextStr += '\n'
      })
      if (pendingTasks.length > 10) {
        contextStr += `... a dal≈°√≠ch ${pendingTasks.length - 10} √∫kol≈Ø\n`
      }
      contextStr += '\n'
    }
  }

  // Seating plan
  if (context.seatingPlan) {
    contextStr += 'ü™ë ROZM√çSTƒöN√ç HOST≈Æ (SEATING PLAN):\n'
    contextStr += `- Celkem stol≈Ø: ${context.seatingPlan.tables?.length || 0}\n`
    contextStr += `- Celkem m√≠st: ${context.seatingPlan.totalSeats || 0}\n`
    contextStr += `- Obsazen√Ωch m√≠st: ${context.seatingPlan.assignedSeats || 0}\n`
    contextStr += `- Host≈Ø bez p≈ôi≈ôazen√©ho m√≠sta: ${context.seatingPlan.unassignedGuests || 0}\n`

    if (context.seatingPlan.tables && context.seatingPlan.tables.length > 0) {
      contextStr += '\nüìã DETAILY STOL≈Æ:\n'
      context.seatingPlan.tables.forEach((table: any) => {
        const occupiedSeats = table.seats?.filter((s: any) => s.guestId).length || 0
        contextStr += `- St≈Øl ${table.number || table.name}: ${occupiedSeats}/${table.capacity} m√≠st obsazeno`
        if (table.shape) {
          contextStr += ` (${table.shape})`
        }
        contextStr += '\n'
      })
    }
    contextStr += '\n'
  }

  // Wedding website
  if (context.weddingWebsite) {
    contextStr += 'üåê SVATEBN√ç WEB:\n'
    contextStr += `- URL: ${context.weddingWebsite.customUrl}.svatbot.cz\n`
    contextStr += `- Publikov√°no: ${context.weddingWebsite.isPublished ? 'Ano' : 'Ne'}\n`
    contextStr += `- RSVP formul√°≈ô: ${context.weddingWebsite.hasRSVP ? 'Aktivn√≠' : 'Neaktivn√≠'}\n`
    contextStr += `- Poƒçet zobrazen√≠: ${context.weddingWebsite.views || 0}\n\n`
  }

  // Accommodations
  if (context.accommodationStats) {
    contextStr += 'üè® UBYTOV√ÅN√ç:\n'
    contextStr += `- Celkem ubytov√°n√≠: ${context.accommodationStats.total || 0}\n`
    contextStr += `- Celkem pokoj≈Ø: ${context.accommodationStats.totalRooms || 0}\n`
    contextStr += `- Rezervovan√Ωch pokoj≈Ø: ${context.accommodationStats.reservedRooms || 0}\n`
    contextStr += `- Voln√Ωch pokoj≈Ø: ${context.accommodationStats.availableRooms || 0}\n`

    if (context.accommodations && context.accommodations.length > 0) {
      contextStr += '\nüìã SEZNAM UBYTOV√ÅN√ç:\n'
      context.accommodations.forEach((acc: any) => {
        contextStr += `- ${acc.name}: ${acc.rooms?.length || 0} pokoj≈Ø`
        if (acc.address) {
          contextStr += ` (${acc.address})`
        }
        contextStr += '\n'
      })
    }
    contextStr += '\n'
  }

  // Shopping list
  if (context.shoppingStats) {
    contextStr += 'üõí N√ÅKUPN√ç SEZNAM:\n'
    contextStr += `- Celkem polo≈æek: ${context.shoppingStats.total || 0}\n`
    contextStr += `- Zakoupeno: ${context.shoppingStats.purchased || 0}\n`
    contextStr += `- Celkov√° cena: ${context.shoppingStats.totalCost?.toLocaleString() || 0} Kƒç\n`
    contextStr += `- Zb√Ωv√° nakoupit za: ${context.shoppingStats.remainingCost?.toLocaleString() || 0} Kƒç\n`

    if (context.shoppingItems && context.shoppingItems.length > 0) {
      const unpurchased = context.shoppingItems.filter((item: any) => !item.purchased)
      if (unpurchased.length > 0) {
        contextStr += '\nüìù NEZAKOUPEN√â POLO≈ΩKY:\n'
        unpurchased.slice(0, 10).forEach((item: any) => {
          contextStr += `- ${item.name}`
          if (item.estimatedPrice) {
            contextStr += ` (${item.estimatedPrice.toLocaleString()} Kƒç)`
          }
          if (item.category) {
            contextStr += ` - ${item.category}`
          }
          contextStr += '\n'
        })
        if (unpurchased.length > 10) {
          contextStr += `... a dal≈°√≠ch ${unpurchased.length - 10} polo≈æek\n`
        }
      }
    }
    contextStr += '\n'
  }

  // Calendar
  if (context.calendarStats) {
    contextStr += 'üìÖ KALEND√Å≈ò UD√ÅLOST√ç:\n'
    contextStr += `- Celkem ud√°lost√≠: ${context.calendarStats.total || 0}\n`
    contextStr += `- Nadch√°zej√≠c√≠ch: ${context.calendarStats.upcoming || 0}\n`
    contextStr += `- Dnes: ${context.calendarStats.today || 0}\n`
    contextStr += `- Tento t√Ωden: ${context.calendarStats.thisWeek || 0}\n`

    if (context.calendarEvents && context.calendarEvents.length > 0) {
      contextStr += '\nüìã NADCH√ÅZEJ√çC√ç UD√ÅLOSTI:\n'
      const upcomingEvents = context.calendarEvents
        .filter((event: any) => new Date(event.startDate) >= new Date())
        .slice(0, 10)

      upcomingEvents.forEach((event: any) => {
        const eventDate = new Date(event.startDate)
        contextStr += `- ${event.title}`
        contextStr += ` (${eventDate.toLocaleDateString('cs-CZ')})`
        if (event.startTime) {
          contextStr += ` v ${event.startTime}`
        }
        if (event.location) {
          contextStr += ` - ${event.location}`
        }
        contextStr += '\n'
      })

      if (context.calendarEvents.length > 10) {
        contextStr += `... a dal≈°√≠ch ${context.calendarEvents.length - 10} ud√°lost√≠\n`
      }
    }
    contextStr += '\n'
  }

  contextStr += '=== KONEC KONTEXTU ===\n'

  return contextStr
}

export async function POST(request: NextRequest) {
  try {
    const { question, context } = await request.json()

    if (!question) {
      return NextResponse.json(
        { error: 'Ot√°zka je povinn√°' },
        { status: 400 }
      )
    }

    // Build detailed context string with all user data
    const contextInfo = buildDetailedContext(context)

    // Add current date to system prompt
    const today = new Date()
    const currentDateInfo = `\n\nüìÖ AKTU√ÅLN√ç DATUM: ${today.toLocaleDateString('cs-CZ', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })} (${today.toISOString().split('T')[0]})\n`

    const enhancedSystemPrompt = SVATBOT_SYSTEM_PROMPT + currentDateInfo

    let content: string

    if (!openai) {
      // Mock response when OpenAI is not available
      content = "Omlouv√°m se, moment√°lnƒõ nejsem dostupn√Ω. Zkuste to pros√≠m pozdƒõji. ü§ñüíï"
    } else {
      // GPT-5 uses Responses API with built-in web search
      const inputText = `${enhancedSystemPrompt}\n\n${contextInfo}\n\nOt√°zka u≈æivatele: ${question}`

      let response = await openai.responses.create({
        model: "gpt-5-mini",
        input: inputText,
        tools: [{ type: "web_search" }], // ‚úÖ Enable built-in web search
        reasoning: { effort: 'low' }, // Fast responses for chat
        text: { verbosity: 'medium' },
        max_output_tokens: 3000 // 3000 tokens for max 3 results
      })

      // If response is incomplete, poll for completion
      if (response.status === 'incomplete') {
        let attempts = 0
        const maxAttempts = 20 // Max 40 seconds

        while (response.status === 'incomplete' && attempts < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 2000))
          response = await openai.responses.retrieve(response.id)
          attempts++
        }
      }

      // Extract text from Responses API output
      content = ''
      if (response.output && Array.isArray(response.output)) {
        const messages = response.output.filter((item: any) => item.type === 'message')
        for (const msg of messages) {
          if ('content' in msg && msg.content && Array.isArray(msg.content)) {
            for (const contentItem of msg.content) {
              if ('type' in contentItem && contentItem.type === 'output_text' && 'text' in contentItem && contentItem.text) {
                content += contentItem.text + '\n\n'
              }
            }
          }
        }
      }

      if (!content.trim()) {
        content = 'Omlouv√°m se, nepoda≈ôilo se mi odpovƒõdƒõt na va≈°i ot√°zku. Zkuste to pros√≠m znovu. üíï'
      }
    }

    return NextResponse.json({ response: content })
  } catch (error) {
    console.error('AI Chat error:', error)
    return NextResponse.json(
      { error: 'Nepoda≈ôilo se z√≠skat odpovƒõƒè od AI asistenta' },
      { status: 500 }
    )
  }
}
