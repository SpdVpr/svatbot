import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

// Initialize OpenAI only if API key is available
const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
}) : null

const WEDDING_CONTEXT = `
Jsi expert na svatebn√≠ pl√°nov√°n√≠ v ƒåesk√© republice. Zn√°≈°:
- ƒåesk√© svatebn√≠ tradice a zvyky
- Pr≈Ømƒõrn√© ceny slu≈æeb v ƒåR (2024-2025)
- Sez√≥nn√≠ faktory (kvƒõten-z√°≈ô√≠ hlavn√≠ sez√≥na)
- Region√°ln√≠ rozd√≠ly (Praha dra≈æ≈°√≠ ne≈æ venkov)
- Pr√°vn√≠ po≈æadavky (matrika, c√≠rkevn√≠ ob≈ôad)
- ƒåasov√© pl√°nov√°n√≠ (12-18 mƒõs√≠c≈Ø dop≈ôedu)

Odpov√≠d√°≈° v≈ædy v ƒçe≈°tinƒõ, prakticky a s konkr√©tn√≠mi ƒç√≠sly.

D≈ÆLE≈ΩIT√â: M√°≈° p≈ô√≠stup k RE√ÅLN√ùM dat≈Øm u≈æivatele o jeho svatbƒõ. Kdy≈æ se u≈æivatel pt√° na konkr√©tn√≠ informace
(nap≈ô. "Kdo m√° alergii na lepek?", "Kolik stoj√≠ fotograf?", "Jak√© √∫koly m√°m nesplnƒõn√©?"),
V≈ΩDY odpov√≠dej na z√°kladƒõ poskytnut√Ωch dat, ne obecnƒõ. Pokud data nejsou k dispozici, ≈ôekni to u≈æivateli.
`

// Helper function to build detailed context string
function buildDetailedContext(context: any): string {
  if (!context) return ''

  let contextStr = '\n=== DETAILN√ç KONTEXT SVATBY ===\n\n'

  // Basic info
  contextStr += 'üìã Z√ÅKLADN√ç INFORMACE:\n'
  contextStr += `- Datum svatby: ${context.weddingDate ? new Date(context.weddingDate).toLocaleDateString('cs-CZ') : 'neurƒçeno'}\n`
  contextStr += `- Lokace: ${context.location || 'neurƒçena'}\n`
  contextStr += `- Styl: ${context.style || 'neurƒçen'}\n`
  contextStr += `- Celkov√Ω rozpoƒçet: ${context.budget ? `${context.budget.toLocaleString()} Kƒç` : 'neurƒçen'}\n`
  contextStr += `- Poƒçet host≈Ø: ${context.guestCount || 'neurƒçen'}\n\n`

  // Guest stats and details
  if (context.guestStats) {
    contextStr += 'üë• STATISTIKY HOST≈Æ:\n'
    contextStr += `- Celkem host≈Ø: ${context.guestStats.total}\n`
    contextStr += `- Potvrzeno: ${context.guestStats.confirmed}\n`
    contextStr += `- Odm√≠tnuto: ${context.guestStats.declined}\n`
    contextStr += `- ƒåek√° na odpovƒõƒè: ${context.guestStats.pending}\n`
    contextStr += `- S dietn√≠mi omezen√≠mi: ${context.guestStats.withDietaryRestrictions}\n`
    contextStr += `- Pot≈ôebuje ubytov√°n√≠: ${context.guestStats.needingAccommodation}\n\n`
  }

  // Detailed guest info with dietary restrictions
  if (context.guests && context.guests.length > 0) {
    const guestsWithDietary = context.guests.filter((g: any) =>
      g.dietaryRestrictions && g.dietaryRestrictions.length > 0
    )

    if (guestsWithDietary.length > 0) {
      contextStr += 'üçΩÔ∏è HOST√â S DIETN√çMI OMEZEN√çMI:\n'
      guestsWithDietary.forEach((guest: any) => {
        contextStr += `- ${guest.firstName} ${guest.lastName}: ${guest.dietaryRestrictions.join(', ')}`
        if (guest.dietaryNotes) {
          contextStr += ` (${guest.dietaryNotes})`
        }
        contextStr += '\n'
      })
      contextStr += '\n'
    }

    const guestsNeedingAccommodation = context.guests.filter((g: any) => g.accommodationNeeded)
    if (guestsNeedingAccommodation.length > 0) {
      contextStr += 'üè® HOST√â POT≈òEBUJ√çC√ç UBYTOV√ÅN√ç:\n'
      guestsNeedingAccommodation.forEach((guest: any) => {
        contextStr += `- ${guest.firstName} ${guest.lastName}\n`
      })
      contextStr += '\n'
    }
  }

  // Budget details
  if (context.budgetStats) {
    contextStr += 'üí∞ ROZPOƒåET:\n'
    contextStr += `- Celkov√Ω rozpoƒçet: ${context.budgetStats.totalBudget.toLocaleString()} Kƒç\n`
    contextStr += `- Celkem utraceno: ${context.budgetStats.totalSpent.toLocaleString()} Kƒç\n`
    contextStr += `- Zaplaceno: ${context.budgetStats.totalPaid.toLocaleString()} Kƒç\n`
    contextStr += `- Zb√Ωv√°: ${context.budgetStats.remaining.toLocaleString()} Kƒç\n`
    contextStr += `- Procento utraceno: ${context.budgetStats.budgetUsed}%\n\n`
  }

  // Budget items
  if (context.budgetItems && context.budgetItems.length > 0) {
    contextStr += 'üìä ROZPOƒåTOV√â POLO≈ΩKY:\n'
    context.budgetItems.forEach((item: any) => {
      contextStr += `- ${item.name} (${item.category}): `
      contextStr += `Pl√°nov√°no ${item.budgetedAmount?.toLocaleString() || 0} Kƒç, `
      contextStr += `Skuteƒçnost ${item.actualAmount?.toLocaleString() || 0} Kƒç, `
      contextStr += `Zaplaceno ${item.paidAmount?.toLocaleString() || 0} Kƒç`
      if (item.vendorName) {
        contextStr += ` - Dodavatel: ${item.vendorName}`
      }
      contextStr += '\n'
    })
    contextStr += '\n'
  }

  // Task stats
  if (context.taskStats) {
    contextStr += '‚úÖ √öKOLY:\n'
    contextStr += `- Celkem √∫kol≈Ø: ${context.taskStats.total}\n`
    contextStr += `- Dokonƒçeno: ${context.taskStats.completed}\n`
    contextStr += `- ƒåek√°: ${context.taskStats.pending}\n`
    contextStr += `- Po term√≠nu: ${context.taskStats.overdue}\n\n`
  }

  // Task details
  if (context.currentTasks && context.currentTasks.length > 0) {
    const pendingTasks = context.currentTasks.filter((t: any) => t.status === 'pending')
    const overdueTasks = context.currentTasks.filter((t: any) => {
      if (!t.dueDate || t.status === 'completed') return false
      return new Date(t.dueDate) < new Date()
    })

    if (overdueTasks.length > 0) {
      contextStr += '‚ö†Ô∏è √öKOLY PO TERM√çNU:\n'
      overdueTasks.forEach((task: any) => {
        contextStr += `- ${task.title} (term√≠n: ${new Date(task.dueDate).toLocaleDateString('cs-CZ')})\n`
      })
      contextStr += '\n'
    }

    if (pendingTasks.length > 0) {
      contextStr += 'üìù ƒåEKAJ√çC√ç √öKOLY:\n'
      pendingTasks.slice(0, 10).forEach((task: any) => {
        contextStr += `- ${task.title}`
        if (task.dueDate) {
          contextStr += ` (term√≠n: ${new Date(task.dueDate).toLocaleDateString('cs-CZ')})`
        }
        contextStr += '\n'
      })
      if (pendingTasks.length > 10) {
        contextStr += `... a dal≈°√≠ch ${pendingTasks.length - 10} √∫kol≈Ø\n`
      }
      contextStr += '\n'
    }
  }

  contextStr += '=== KONEC KONTEXTU ===\n'

  return contextStr
}

export async function POST(request: NextRequest) {
  try {
    const { question, context } = await request.json()

    if (!question) {
      return NextResponse.json(
        { error: 'Ot√°zka je povinn√°' },
        { status: 400 }
      )
    }

    // Build detailed context string with all user data
    const contextInfo = buildDetailedContext(context)

    let content: string

    if (!openai) {
      // Mock response when OpenAI is not available
      content = "Omlouv√°m se, AI asistent moment√°lnƒõ nen√≠ dostupn√Ω. Zkuste to pros√≠m pozdƒõji."
    } else {
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: WEDDING_CONTEXT
          },
          {
            role: "user",
            content: `${contextInfo}\n\nOt√°zka u≈æivatele: ${question}`
          }
        ],
        max_tokens: 1000, // Increased for more detailed responses
        temperature: 0.7
      })

      content = response.choices[0]?.message?.content || 'Omlouv√°m se, nepoda≈ôilo se mi odpovƒõdƒõt na va≈°i ot√°zku.'
    }

    return NextResponse.json({ response: content })
  } catch (error) {
    console.error('AI Chat error:', error)
    return NextResponse.json(
      { error: 'Nepoda≈ôilo se z√≠skat odpovƒõƒè od AI asistenta' },
      { status: 500 }
    )
  }
}
