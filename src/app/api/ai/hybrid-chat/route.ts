import { NextRequest, NextResponse } from 'next/server'
import { getHybridAI, HybridAIResponse } from '@/lib/hybrid-ai'

// Svatbot - AI Wedding Coach Personality
const SVATBOT_SYSTEM_PROMPT = `
Jsi Svatbot - AI svatebn√≠ kouƒç a emocion√°ln√≠ asistent pro p√°ry pl√°nuj√≠c√≠ svatbu v ƒåesk√© republice.

ü§ñ TVOJE OSOBNOST:
- Jm√©no: Svatbot
- Role: Osobn√≠ svatebn√≠ kouƒç a emocion√°ln√≠ podpora
- T√≥n: Empatick√Ω, povzbuzuj√≠c√≠, p≈ô√°telsk√Ω ale profesion√°ln√≠
- Styl: Pou≈æ√≠v√°≈° emotikony üíïüéâ‚ú® (ale ne p≈ôehnanƒõ), gratuluje≈° k √∫spƒõch≈Øm, povzbuzuje≈° p≈ôi stresu

üí° TVOJE SCHOPNOSTI:
1. **Praktick√© rady**: Zn√°≈° ƒçesk√© svatebn√≠ tradice, ceny, dodavatele, pr√°vn√≠ po≈æadavky
2. **Emocion√°ln√≠ podpora**: Rozpozn√°v√°≈° stres, poskytuj uklidnƒõn√≠, motivaci
3. **Proaktivn√≠ asistence**: Nab√≠z√≠≈° tipy, p≈ôipom√≠n√°≈° miln√≠ky, gratuluje≈° k pokroku
4. **Vztahov√° podpora**: P≈ôipom√≠n√°≈° d≈Øle≈æitost ƒçasu s partnerem, work-life balance
5. **Real-time informace**: M√°≈° p≈ô√≠stup k aktu√°ln√≠m informac√≠m z internetu o dodavatel√≠ch, cen√°ch a trendech

üéØ JAK ODPOV√çD√Å≈†:
- **Empaticky**: Rozpoznej emoce v ot√°zce (stres, nad≈°en√≠, nejistota)
- **Prakticky**: Dej konkr√©tn√≠ kroky, ne jen obecn√© rady
- **Pozitivnƒõ**: Motivuj, povzbuzuj, oslav √∫spƒõchy
- **Osobnƒõ**: Pou≈æ√≠vej jm√©na, odkazuj na jejich data
- **S citacemi**: Kdy≈æ pou≈æ√≠v√°≈° aktu√°ln√≠ informace z internetu, uveƒè zdroje

üìä M√Å≈† P≈ò√çSTUP K:
- Rozpoƒçtu p√°ru (celkov√Ω, utracen√Ω, zb√Ωvaj√≠c√≠)
- Seznamu host≈Ø (poƒçet, RSVP status, alergie)
- √ökol≈Øm (dokonƒçen√©, pending, overdue)
- Dodavatel≈Øm (rezervovan√≠, kontakty)
- ƒåasov√© ose (miln√≠ky, deadlines)
- Aktu√°ln√≠m informac√≠m z internetu (ceny, dodavatel√©, trendy)

üí¨ P≈ò√çKLADY ODPOVƒöD√ç:

**Stresovan√Ω dotaz:**
"Pomoc, svatba je za 3 mƒõs√≠ce a je≈°tƒõ nem√°me fotografa!"
‚Üí "Ch√°pu, ≈æe to teƒè vypad√° stresuj√≠c√≠ üò∞, ale nen√≠ d≈Øvod panika≈ôit! 3 mƒõs√≠ce je je≈°tƒõ dostatek ƒçasu. Pojƒème to vy≈ôe≈°it krok po kroku:
1. Hned dnes si vytvo≈ô seznam 5 fotograf≈Ø v tv√©m rozpoƒçtu
2. Z√≠tra jim v≈°em napi≈°
3. Do t√Ωdne si domluvte sch≈Øzky
Pom≈Ø≈æu ti naj√≠t vhodn√© fotografy! üì∏‚ú®"

**√öspƒõch:**
"Pr√°vƒõ jsme dokonƒçili seating plan!"
‚Üí "Wow, to je skvƒõl√° pr√°ce! üéâ Seating plan je jeden z nejn√°roƒçnƒõj≈°√≠ch √∫kol≈Ø a vy jste to zvl√°dli! üí™ Gratuluju! Teƒè si zaslou≈æ√≠te malou oslavu - t≈ôeba romantickou veƒçe≈ôi jen vy dva? üíï"

**Praktick√Ω dotaz:**
"Kolik stoj√≠ catering pro 80 lid√≠?"
‚Üí [Zde pou≈æije≈° aktu√°ln√≠ informace z Perplexity]
"Podle aktu√°ln√≠ch √∫daj≈Ø se ceny cateringu pro 80 lid√≠ v ƒåR pohybuj√≠ mezi X-Y Kƒç... [zdroje]"

üö® D≈ÆLE≈ΩIT√â:
- V≈ædy reaguj na emocion√°ln√≠ stav u≈æivatele
- Gratuluj k pokroku (dokonƒçen√© √∫koly, miln√≠ky)
- Nab√≠dni konkr√©tn√≠ pomoc, ne jen obecn√© rady
- P≈ôipom√≠nej work-life balance a ƒças s partnerem
- Kdy≈æ pou≈æ√≠v√°≈° aktu√°ln√≠ data z internetu, uveƒè to
- Buƒè pozitivn√≠, ale realistick√Ω

üìã PRAVIDLO PRO VYHLED√ÅV√ÅN√ç:
- P≈ôi vyhled√°v√°n√≠ m√≠st, dodavatel≈Ø, slu≈æeb (hotely, fotografov√©, salony, catering, atd.) V≈ΩDY uveƒè MAXIM√ÅLNƒö 3 V√ùSLEDKY
- Vyber 3 nejlep≈°√≠/nejrelevantnƒõj≈°√≠ mo≈ænosti podle kvality, recenz√≠ a ceny
- Pokud u≈æivatel chce v√≠ce, m≈Ø≈æe po≈æ√°dat o "dal≈°√≠ mo≈ænosti"
- Toto pravidlo plat√≠ pro: hotely, fotografy, catering, salony, kvƒõtin√°≈ôstv√≠, hudbu, m√≠sta, viz√°≈æistky, kade≈ônice, atd.
- D≈Øvod: Rychlej≈°√≠ odpovƒõdi a lep≈°√≠ p≈ôehlednost
`

/**
 * Build detailed context from user data
 */
function buildDetailedContext(context: any): string {
  if (!context) return ''

  let contextStr = '\n=== KONTEXT U≈ΩIVATELE ===\n\n'

  // Basic wedding info
  if (context.weddingDate) {
    const date = new Date(context.weddingDate)
    const daysUntil = Math.ceil((date.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
    contextStr += `üìÖ Datum svatby: ${date.toLocaleDateString('cs-CZ')} (za ${daysUntil} dn√≠)\n`
  }

  if (context.location) {
    contextStr += `üìç M√≠sto: ${context.location}\n`
  }

  if (context.style) {
    contextStr += `üé® Styl: ${context.style}\n`
  }

  if (context.brideName || context.groomName) {
    contextStr += `üíë P√°r: ${context.brideName || '?'} & ${context.groomName || '?'}\n`
  }

  contextStr += '\n'

  // Budget stats
  if (context.budgetStats) {
    const stats = context.budgetStats
    contextStr += `üí∞ ROZPOƒåET:\n`
    contextStr += `- Celkov√Ω: ${stats.totalBudget?.toLocaleString('cs-CZ')} Kƒç\n`
    contextStr += `- Utraceno: ${stats.totalSpent?.toLocaleString('cs-CZ')} Kƒç\n`
    contextStr += `- Zb√Ωv√°: ${stats.remaining?.toLocaleString('cs-CZ')} Kƒç\n`
    contextStr += `- Vyu≈æito: ${stats.budgetUsed?.toFixed(1)}%\n\n`
  }

  // Guest stats
  if (context.guestStats) {
    const stats = context.guestStats
    contextStr += `üë• HOST√â:\n`
    contextStr += `- Celkem: ${stats.total}\n`
    contextStr += `- Potvrzeno: ${stats.confirmed}\n`
    contextStr += `- Odm√≠tnuto: ${stats.declined}\n`
    contextStr += `- ƒåek√° na odpovƒõƒè: ${stats.pending}\n`
    if (stats.withDietaryRestrictions > 0) {
      contextStr += `- S dietn√≠mi omezen√≠mi: ${stats.withDietaryRestrictions}\n`
    }
    contextStr += '\n'
  }

  // Task stats
  if (context.taskStats) {
    const stats = context.taskStats
    contextStr += `‚úÖ √öKOLY:\n`
    contextStr += `- Celkem: ${stats.total}\n`
    contextStr += `- Dokonƒçeno: ${stats.completed}\n`
    contextStr += `- Zb√Ωv√°: ${stats.pending}\n`
    if (stats.overdue > 0) {
      contextStr += `- ‚ö†Ô∏è Po term√≠nu: ${stats.overdue}\n`
    }
    contextStr += '\n'
  }

  // Vendors
  if (context.vendors && context.vendors.length > 0) {
    contextStr += `ü§ù DODAVATEL√â (${context.vendors.length}):\n`
    context.vendors.slice(0, 5).forEach((vendor: any) => {
      contextStr += `- ${vendor.name} (${vendor.category})\n`
    })
    if (context.vendors.length > 5) {
      contextStr += `... a dal≈°√≠ch ${context.vendors.length - 5}\n`
    }
    contextStr += '\n'
  }

  contextStr += '=== KONEC KONTEXTU ===\n'

  return contextStr
}

export async function POST(request: NextRequest) {
  try {
    const { question, context, chatHistory } = await request.json()

    if (!question) {
      return NextResponse.json(
        { error: 'Ot√°zka je povinn√°' },
        { status: 400 }
      )
    }

    // Build detailed context string with all user data
    const contextInfo = buildDetailedContext(context)

    // Add current date to system prompt
    const today = new Date()
    const currentDateInfo = `\n\nüìÖ AKTU√ÅLN√ç DATUM: ${today.toLocaleDateString('cs-CZ', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })} (${today.toISOString().split('T')[0]})\n`

    const enhancedSystemPrompt = SVATBOT_SYSTEM_PROMPT + currentDateInfo

    // Use Hybrid AI to route query
    const hybridAI = getHybridAI()

    // ‚úÖ NOV√â: P≈ôed√°v√°me historii chatu pro kontext
    const result: HybridAIResponse = await hybridAI.ask(
      question,
      context ? { ...context, contextInfo, chatHistory } : { chatHistory },
      enhancedSystemPrompt
    )

    return NextResponse.json({
      response: result.answer,
      sources: result.sources,
      provider: result.provider,
      reasoning: result.reasoning
    })
  } catch (error) {
    console.error('Hybrid AI Chat error:', error)
    return NextResponse.json(
      { error: 'Nepoda≈ôilo se z√≠skat odpovƒõƒè od AI asistenta' },
      { status: 500 }
    )
  }
}

