/**
 * Hybrid AI Router
 * Intelligently routes queries between GPT-4 and Perplexity based on query type
 */

import { getPerplexityClient, PerplexitySearchResult } from './perplexity'
import OpenAI from 'openai'

export interface HybridAIResponse {
  answer: string
  sources?: Array<{
    title: string
    url: string
    snippet?: string
  }>
  provider: 'gpt' | 'perplexity' | 'hybrid'
  reasoning?: string
}

export interface QueryAnalysis {
  needsRealTimeData: boolean
  needsExternalSources: boolean
  needsPersonalContext: boolean
  queryType: 'personal' | 'search' | 'hybrid'
  confidence: number
}

/**
 * Hybrid AI Router
 * Combines GPT-4 for personal planning and Perplexity for real-time information
 */
export class HybridAI {
  private openai: OpenAI | null
  private perplexity: ReturnType<typeof getPerplexityClient>

  constructor() {
    this.openai = process.env.OPENAI_API_KEY
      ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
      : null
    this.perplexity = getPerplexityClient()
  }

  /**
   * Analyze query to determine which AI to use
   */
  private analyzeQuery(query: string, hasContext: boolean): QueryAnalysis {
    const lowerQuery = query.toLowerCase()

    // Keywords indicating questions about user's own data (NO web search needed)
    const personalDataKeywords = [
      'kolik m√°m', 'kolik m√°me', 'kolik je', 'kolik m√°≈°',
      'poƒçet', 'celkem', 'celkov√°', 'celkov√Ω',
      'potvrzeno', 'potvrzen√Ωch', 'odm√≠tnuto', 'odm√≠tnut√Ωch',
      'zb√Ωv√°', 'zb√Ωvaj√≠c√≠', 'utraceno', 'utracen√Ωch',
      'dokonƒçeno', 'dokonƒçen√Ωch', 'pending', 'ƒçek√°',
      'moje', 'm≈Øj', 'na≈°e', 'n√°≈°', 'moji', 'na≈°i',
      'v aplikaci', 'v syst√©mu', 'v datab√°zi',
      'seznam', 'p≈ôehled', 'statistika', 'statistiky'
    ]

    // Keywords indicating need for external search (web search needed)
    const searchKeywords = [
      'najdi', 'vyhledej', 'hled√°m', 'doporuƒç', 'doporuƒçen√≠',
      'kde najdu', 'kde sehnat', 'kde koupit',
      'kontakt na', 'adresa', 'telefon na',
      'recenze', 'hodnocen√≠', 'portfolio', 'fotky',
      'aktu√°ln√≠ ceny', 'kolik stoj√≠', 'cena za',
      'trendy', 'novinky', 'souƒçasn√Ω', 'modern√≠',
      'poƒças√≠', 'p≈ôedpovƒõƒè', 'teplota', 'bude', 'dnes',
      'z√≠tra', 'v√≠kend', 'pr≈°√≠', 'snƒõ≈æ√≠', 'sluneƒçno',
      'online', 'internet', 'web', 'st√°hni', 'zjisti'
    ]

    // Vendor/service keywords (usually need search)
    const vendorKeywords = [
      'fotograf', 'catering', 'm√≠sto', 'lokace', 'hotel', 'ubytov√°n√≠',
      'kvƒõtiny', 'hudba', 'dj', 'kapela', '≈°aty', 'oblek',
      'viz√°≈æistka', 'kade≈ônice', 'dort', 'cukr√°rna',
      'dodavatel', 'slu≈æba', 'firma', 'salon'
    ]

    // Explicit search commands (highest priority for search)
    const explicitSearchCommands = [
      'vyhledej', 'najdi', 'hledej', 'zjisti', 'st√°hni',
      'online', 'z internetu', 'z webu'
    ]
    const hasExplicitSearchCommand = explicitSearchCommands.some(kw => lowerQuery.includes(kw))

    // Check for personal data queries
    const isPersonalDataQuery = personalDataKeywords.some(kw => lowerQuery.includes(kw))

    // Check for search queries
    const isSearchQuery = searchKeywords.some(kw => lowerQuery.includes(kw))
    const mentionsVendors = vendorKeywords.some(kw => lowerQuery.includes(kw))

    let queryType: 'personal' | 'search' | 'hybrid' = 'personal'
    let confidence = 0.5

    // Priority 0: Explicit search commands (ALWAYS use web search)
    if (hasExplicitSearchCommand) {
      queryType = 'search'
      confidence = 0.99
    }
    // Priority 1: Personal data queries (about user's own data in app)
    else if (isPersonalDataQuery || (hasContext && !isSearchQuery && !mentionsVendors)) {
      queryType = 'personal'
      confidence = 0.95
    }
    // Priority 2: Clear search queries
    else if (isSearchQuery && mentionsVendors) {
      queryType = 'search'
      confidence = 0.9
    }
    // Priority 3: Search queries without vendors (weather, etc.)
    else if (isSearchQuery) {
      queryType = 'search'
      confidence = 0.85
    }
    // Priority 4: Vendor mentions without clear search intent
    else if (mentionsVendors) {
      queryType = 'hybrid'
      confidence = 0.7
    }
    // Default: personal
    else {
      queryType = 'personal'
      confidence = 0.8
    }

    return {
      needsRealTimeData: isSearchQuery,
      needsExternalSources: isSearchQuery || mentionsVendors,
      needsPersonalContext: isPersonalDataQuery || hasContext,
      queryType,
      confidence
    }
  }

  /**
   * Route query to appropriate AI
   */
  async ask(
    query: string,
    context?: any,
    systemPrompt?: string
  ): Promise<HybridAIResponse> {
    if (!this.openai) {
      throw new Error('OpenAI nen√≠ nakonfigurov√°no')
    }

    // Analyze query to determine if web search is needed
    const analysis = this.analyzeQuery(query, !!context)

    // Decide whether to use web search based on query type
    const useWebSearch = analysis.queryType === 'search' || analysis.queryType === 'hybrid'

    if (useWebSearch) {
      console.log('ü§ñ AI Routing: Using GPT-5 with web search (query type:', analysis.queryType, ')')
    } else {
      console.log('ü§ñ AI Routing: Using GPT-5 without web search (personal query)')
    }

    return this.useGPT(query, context, systemPrompt, useWebSearch)
  }

  /**
   * Use GPT-5 for queries (with or without web search)
   */
  private async useGPT(
    query: string,
    context?: any,
    systemPrompt?: string,
    useWebSearch: boolean = false
  ): Promise<HybridAIResponse> {
    if (!this.openai) {
      throw new Error('OpenAI not configured')
    }

    const messages: OpenAI.Chat.ChatCompletionMessageParam[] = []

    const enhancedPrompt = systemPrompt || `Jsi Svatbot - AI svatebn√≠ kouƒç. Pom√°h√°≈° p√°r≈Øm pl√°novat jejich svatbu.

D≈ÆLE≈ΩIT√â PRAVIDLO FORM√ÅTOV√ÅN√ç:
- Pou≈æ√≠vej markdown form√°tov√°n√≠ pro lep≈°√≠ ƒçitelnost
- Pou≈æ√≠vej **tuƒçn√© p√≠smo** pro d≈Øle≈æit√© informace (n√°zvy, ceny, adresy)
- Pou≈æ√≠vej odr√°≈æky (‚Ä¢) nebo ƒç√≠slovan√© seznamy pro v√Ωƒçty
- Pou≈æ√≠vej nadpisy (###) pro sekce
- Pou≈æ√≠vej pr√°zdn√© ≈ô√°dky mezi sekcemi
- Pro kontakty a odkazy pou≈æ√≠vej form√°t: **Web**: [text](url)

D≈ÆLE≈ΩIT√â PRAVIDLO PRO VYHLED√ÅV√ÅN√ç:
- P≈ôi vyhled√°v√°n√≠ m√≠st, dodavatel≈Ø, slu≈æeb (hotely, fotografov√©, salony, atd.) V≈ΩDY uveƒè MAXIM√ÅLNƒö 3 V√ùSLEDKY
- Vyber 3 nejlep≈°√≠/nejrelevantnƒõj≈°√≠ mo≈ænosti podle kvality, recenz√≠ a ceny
- Pokud u≈æivatel chce v√≠ce, m≈Ø≈æe po≈æ√°dat o dal≈°√≠
- Toto pravidlo plat√≠ pro: hotely, fotografy, catering, salony, kvƒõtin√°≈ôstv√≠, hudbu, m√≠sta, atd.

P≈ô√≠klad dob≈ôe form√°tovan√© odpovƒõdi:

### üè® Doporuƒçen√© hotely (TOP 3)

**1. Hotel Grandior**
‚Ä¢ **Adresa**: Hlavn√≠ 123, Praha 1
‚Ä¢ **Kapacita**: 50 pokoj≈Ø
‚Ä¢ **Cena**: 2 500 - 4 000 Kƒç/noc
‚Ä¢ **Web**: [hotelgrandior.cz](https://hotelgrandior.cz)
‚Ä¢ **Vybaven√≠**: Restaurace, parkov√°n√≠, wellness

**2. Penzion U L√≠py**
‚Ä¢ **Adresa**: Lipov√° 45, Praha 5
‚Ä¢ **Kapacita**: 15 pokoj≈Ø
‚Ä¢ **Cena**: 1 500 - 2 500 Kƒç/noc
‚Ä¢ **Kontakt**: +420 123 456 789

**3. Resort Zahrada**
‚Ä¢ **Adresa**: Zahradn√≠ 10, Praha 6
‚Ä¢ **Kapacita**: 30 pokoj≈Ø
‚Ä¢ **Cena**: 3 000 - 5 000 Kƒç/noc
‚Ä¢ **Web**: [resortzahrada.cz](https://resortzahrada.cz)

üí° Chcete vidƒõt dal≈°√≠ mo≈ænosti? Napi≈°te "dal≈°√≠ hotely".`

    messages.push({
      role: 'system',
      content: enhancedPrompt
    })

    // ‚úÖ NOV√â: P≈ôid√°me historii chatu pro kontext
    if (context?.chatHistory && Array.isArray(context.chatHistory)) {
      context.chatHistory.forEach((msg: any) => {
        messages.push({
          role: msg.role as 'user' | 'assistant',
          content: msg.content
        })
      })
    }

    // P≈ôid√°me kontext a aktu√°ln√≠ ot√°zku
    let userContent = query
    if (context) {
      const contextWithoutHistory = { ...context }
      delete contextWithoutHistory.chatHistory  // Odstran√≠me historii z kontextu (u≈æ je v messages)
      userContent = `Kontext:\n${JSON.stringify(contextWithoutHistory, null, 2)}\n\nOt√°zka: ${query}`
    }

    messages.push({
      role: 'user',
      content: userContent
    })

    // GPT-5 with Responses API
    // Convert messages to Responses API format
    const systemMessage = messages.find(m => m.role === 'system')
    const userMessages = messages.filter(m => m.role !== 'system')

    // Build input text from messages
    let inputText = typeof systemMessage?.content === 'string' ? systemMessage.content : ''
    userMessages.forEach(msg => {
      const content = typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content)
      inputText += `\n\n${msg.role === 'user' ? 'U≈æivatel' : 'Asistent'}: ${content}`
    })

    // Configure tools based on whether web search is needed
    const tools = useWebSearch ? [{ type: 'web_search' as const }] : undefined

    let response = await this.openai.responses.create({
      model: 'gpt-5-mini',
      input: inputText,
      tools, // ‚úÖ Conditionally enable web search
      reasoning: { effort: 'low' }, // Low effort for faster responses
      text: { verbosity: 'medium' },
      max_output_tokens: useWebSearch ? 3000 : 2000 // 3000 for web search (max 3 results), 2000 for personal
    })

    // If response is incomplete, poll for completion
    if (response.status === 'incomplete') {
      console.log('‚è≥ Response incomplete, polling for completion...')
      let attempts = 0
      const maxAttempts = 20 // Max 40 seconds (20 * 2s)

      while (response.status === 'incomplete' && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 2000)) // Wait 2 seconds
        response = await this.openai.responses.retrieve(response.id)
        attempts++
      }

      console.log(`‚úÖ Polling complete after ${attempts} attempts, status: ${response.status}`)
    }

    // Extract text from Responses API output
    let answer = ''

    if (response.output && Array.isArray(response.output)) {
      const messages = response.output.filter((item: any) => item.type === 'message')

      for (const msg of messages) {
        if ('content' in msg && msg.content && Array.isArray(msg.content)) {
          for (const contentItem of msg.content) {
            if ('type' in contentItem && contentItem.type === 'output_text' && 'text' in contentItem && contentItem.text) {
              answer += contentItem.text + '\n\n'
            }
          }
        }
      }
    }

    if (!answer.trim()) {
      console.log('‚ö†Ô∏è No answer extracted, response status:', response.status)
      console.log('‚ö†Ô∏è Output items:', response.output?.map((item: any) => item.type).join(', '))
      answer = 'Nepoda≈ôilo se z√≠skat odpovƒõƒè. Zkuste to pros√≠m znovu.'
    }

    return {
      answer: answer.trim(),
      provider: 'gpt',
      reasoning: useWebSearch
        ? 'Pou≈æit GPT-5-mini s web search'
        : 'Pou≈æit GPT-5-mini (bez web search)'
    }
  }

  /**
   * Use Perplexity for real-time search
   */
  private async usePerplexity(
    query: string,
    systemPrompt?: string
  ): Promise<HybridAIResponse> {
    const result = await this.perplexity.search(query, systemPrompt)

    return {
      answer: result.answer,
      sources: result.sources,
      provider: 'perplexity',
      reasoning: 'Pou≈æita Perplexity pro aktu√°ln√≠ informace z internetu'
    }
  }

  /**
   * Use hybrid approach - Perplexity for data, GPT for synthesis
   */
  private async useHybrid(
    query: string,
    context?: any,
    systemPrompt?: string
  ): Promise<HybridAIResponse> {
    try {
      console.log('ü§ñ Hybrid AI: Starting search...')

      // First, get real-time data from Perplexity
      // Note: Removed long system prompt for speed - Perplexity is fast without it
      const perplexityResult = await this.perplexity.search(query)

      // If no meaningful personal context, return Perplexity result directly (faster)
      const hasPersonalContext = context && (
        context.weddingDate ||
        context.budget ||
        context.guestCount ||
        context.venue ||
        (context.tasks && context.tasks.length > 0) ||
        (context.guests && context.guests.length > 0)
      )

      if (!hasPersonalContext || !this.openai) {
        return {
          answer: perplexityResult.answer,
          sources: perplexityResult.sources,
          provider: 'perplexity',
          reasoning: 'Pou≈æita Perplexity pro aktu√°ln√≠ informace z internetu'
        }
      }

      // Only synthesize with GPT if there's meaningful personal context
      if (this.openai && hasPersonalContext) {
        const synthesisPrompt = systemPrompt || `Jsi Svatbot - AI svatebn√≠ kouƒç.

D≈ÆLE≈ΩIT√â PRAVIDLO FORM√ÅTOV√ÅN√ç:
- Pou≈æ√≠vej markdown form√°tov√°n√≠ pro lep≈°√≠ ƒçitelnost
- Pou≈æ√≠vej **tuƒçn√© p√≠smo** pro d≈Øle≈æit√© informace (n√°zvy, ceny, adresy)
- Pou≈æ√≠vej odr√°≈æky (‚Ä¢) nebo ƒç√≠slovan√© seznamy pro v√Ωƒçty
- Pou≈æ√≠vej nadpisy (###) pro sekce
- Pou≈æ√≠vej pr√°zdn√© ≈ô√°dky mezi sekcemi
- Pro kontakty a odkazy pou≈æ√≠vej form√°t: **Web**: [text](url)
- Pou≈æ√≠vej emoji pro lep≈°√≠ vizu√°ln√≠ orientaci (üè®, üìç, üí∞, üìû, üåê)

P≈ô√≠klad dob≈ôe form√°tovan√© odpovƒõdi:

### üè® Doporuƒçen√© hotely

**1. Hotel Grandior**
‚Ä¢ **Adresa**: Hlavn√≠ 123, Praha 1
‚Ä¢ **Kapacita**: 50 pokoj≈Ø
‚Ä¢ **Cena**: 2 500 - 4 000 Kƒç/noc
‚Ä¢ **Web**: [hotelgrandior.cz](https://hotelgrandior.cz)
‚Ä¢ **Vybaven√≠**: Restaurace, parkov√°n√≠, wellness

**2. Penzion U L√≠py**
‚Ä¢ **Adresa**: Lipov√° 45, Praha 5
‚Ä¢ **Kapacita**: 15 pokoj≈Ø
‚Ä¢ **Cena**: 1 500 - 2 500 Kƒç/noc
‚Ä¢ **Kontakt**: +420 123 456 789`

        const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
          {
            role: 'system',
            content: synthesisPrompt
          }
        ]

        // ‚úÖ NOV√â: P≈ôid√°me historii chatu pro kontext
        if (context?.chatHistory && Array.isArray(context.chatHistory)) {
          context.chatHistory.forEach((msg: any) => {
            messages.push({
              role: msg.role as 'user' | 'assistant',
              content: msg.content
            })
          })
        }

        // P≈ôid√°me aktu√°ln√≠ dotaz s Perplexity v√Ωsledky
        const contextWithoutHistory = { ...context }
        delete contextWithoutHistory.chatHistory

        // GPT-5 uses Responses API - convert messages to input
        const systemMessage = messages.find(m => m.role === 'system')
        const userContent = `
U≈æivatel se pt√°: ${query}

Aktu√°ln√≠ informace z internetu:
${perplexityResult.answer}

Zdroje: ${perplexityResult.citations.join(', ')}

Kontext u≈æivatele:
${JSON.stringify(contextWithoutHistory, null, 2)}

Poskytni personalizovanou odpovƒõƒè, kter√° kombinuje aktu√°ln√≠ informace s kontextem u≈æivatele.
D≈ÆLE≈ΩIT√â: Pou≈æij markdown form√°tov√°n√≠ podle vzoru v√Ω≈°e pro maxim√°ln√≠ ƒçitelnost.
        `.trim()

        const inputText = systemMessage
          ? `${systemMessage.content}\n\n${userContent}`
          : userContent

        const response = await this.openai.responses.create({
          model: 'gpt-5-mini',
          input: inputText,
          reasoning: { effort: 'medium' }, // Medium reasoning for hybrid synthesis
          text: { verbosity: 'medium' },
          max_output_tokens: 1500
        })

        const synthesizedAnswer = response.output_text || perplexityResult.answer

        return {
          answer: synthesizedAnswer,
          sources: perplexityResult.sources,
          provider: 'hybrid',
          reasoning: 'Kombinace Perplexity (aktu√°ln√≠ data) a GPT-5-mini (personalizace)'
        }
      }

      // If no GPT available, return Perplexity result
      return {
        answer: perplexityResult.answer,
        sources: perplexityResult.sources,
        provider: 'perplexity',
        reasoning: 'Pou≈æita Perplexity pro aktu√°ln√≠ informace'
      }
    } catch (error) {
      console.error('Hybrid AI error:', error)
      // Fallback to GPT only
      return this.useGPT(query, context, systemPrompt)
    }
  }

  /**
   * Specialized methods for common wedding queries
   */

  async findVendors(
    vendorType: string,
    location: string,
    context?: any
  ): Promise<HybridAIResponse> {
    const query = `Hled√°m ${vendorType} pro svatbu v okol√≠ ${location}. Doporuƒç mi konkr√©tn√≠ firmy s kontakty a cenami.`
    return this.ask(query, context)
  }

  async getTrends(year: number = 2025): Promise<HybridAIResponse> {
    const query = `Jak√© jsou aktu√°ln√≠ svatebn√≠ trendy v roce ${year} v ƒåesk√© republice?`
    return this.ask(query)
  }

  async getPrices(
    service: string,
    location: string,
    context?: any
  ): Promise<HybridAIResponse> {
    const query = `Kolik stoj√≠ ${service} pro svatbu v ${location}? Jak√© jsou aktu√°ln√≠ ceny?`
    return this.ask(query, context)
  }

  async getInspiration(
    theme: string,
    context?: any
  ): Promise<HybridAIResponse> {
    const query = `Inspirace pro svatbu v t√©matu ${theme}. Jak√© jsou aktu√°ln√≠ n√°pady a trendy?`
    return this.ask(query, context)
  }
}

// Singleton instance
let hybridAIInstance: HybridAI | null = null

/**
 * Get Hybrid AI instance
 */
export function getHybridAI(): HybridAI {
  if (!hybridAIInstance) {
    hybridAIInstance = new HybridAI()
  }
  return hybridAIInstance
}

